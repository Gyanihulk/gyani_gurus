# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Article {
  id: ID!
  title: String
  slug: String
  articleType: Structure
  content: Article_content_Document
  status: ArticleStatusType
  featuredImage: Asset
  media(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0): [Asset!]
  mediaCount(where: AssetWhereInput! = {}): Int
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Article_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum ArticleStatusType {
  draft
  published
  archived
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ArticleWhereUniqueInput {
  id: ID
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  articleType: StructureWhereInput
  status: ArticleStatusTypeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetManyRelationFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ArticleStatusTypeNullableFilter {
  equals: ArticleStatusType
  in: [ArticleStatusType!]
  notIn: [ArticleStatusType!]
  not: ArticleStatusTypeNullableFilter
}

input AssetManyRelationFilter {
  every: AssetWhereInput
  some: AssetWhereInput
  none: AssetWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ArticleOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ArticleUpdateInput {
  title: String
  slug: String
  articleType: StructureRelateToOneForUpdateInput
  content: JSON
  status: ArticleStatusType
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input StructureRelateToOneForUpdateInput {
  create: StructureCreateInput
  connect: StructureWhereUniqueInput
  disconnect: Boolean
}

input AssetRelateToOneForUpdateInput {
  create: AssetCreateInput
  connect: AssetWhereUniqueInput
  disconnect: Boolean
}

input AssetRelateToManyForUpdateInput {
  disconnect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
  create: [AssetCreateInput!]
  connect: [AssetWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ArticleUpdateArgs {
  where: ArticleWhereUniqueInput!
  data: ArticleUpdateInput!
}

input ArticleCreateInput {
  title: String
  slug: String
  articleType: StructureRelateToOneForCreateInput
  content: JSON
  status: ArticleStatusType
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input StructureRelateToOneForCreateInput {
  create: StructureCreateInput
  connect: StructureWhereUniqueInput
}

input AssetRelateToOneForCreateInput {
  create: AssetCreateInput
  connect: AssetWhereUniqueInput
}

input AssetRelateToManyForCreateInput {
  create: [AssetCreateInput!]
  connect: [AssetWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Animal {
  id: ID!
  name: String
  slug: String
  animalType: Structure
  scientificName: String
  content: Animal_content_Document
  status: AnimalStatusType
  featuredImage: Asset
  media(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0): [Asset!]
  mediaCount(where: AssetWhereInput! = {}): Int
  author: User
  tags: Tag
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Animal_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum AnimalStatusType {
  draft
  published
  archived
}

input AnimalWhereUniqueInput {
  id: ID
}

input AnimalWhereInput {
  AND: [AnimalWhereInput!]
  OR: [AnimalWhereInput!]
  NOT: [AnimalWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  animalType: StructureWhereInput
  scientificName: StringFilter
  status: AnimalStatusTypeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetManyRelationFilter
  author: UserWhereInput
  tags: TagWhereInput
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input AnimalStatusTypeNullableFilter {
  equals: AnimalStatusType
  in: [AnimalStatusType!]
  notIn: [AnimalStatusType!]
  not: AnimalStatusTypeNullableFilter
}

input AnimalOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  scientificName: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input AnimalUpdateInput {
  name: String
  slug: String
  animalType: StructureRelateToOneForUpdateInput
  scientificName: String
  content: JSON
  status: AnimalStatusType
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToOneForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input TagRelateToOneForUpdateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
  disconnect: Boolean
}

input AnimalUpdateArgs {
  where: AnimalWhereUniqueInput!
  data: AnimalUpdateInput!
}

input AnimalCreateInput {
  name: String
  slug: String
  animalType: StructureRelateToOneForCreateInput
  scientificName: String
  content: JSON
  status: AnimalStatusType
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToOneForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input TagRelateToOneForCreateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
}

type Event {
  id: ID!
  name: String
  slug: String
  eventType: Structure
  content: Event_content_Document
  location: JSON
  startDate: DateTime
  endDate: DateTime
  featuredImage: Asset
  media: Asset
  author: User
  status: EventStatusType
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Event_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum EventStatusType {
  draft
  published
  archived
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  eventType: StructureWhereInput
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetWhereInput
  author: UserWhereInput
  status: EventStatusTypeNullableFilter
  tags: TagManyRelationFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input EventStatusTypeNullableFilter {
  equals: EventStatusType
  in: [EventStatusType!]
  notIn: [EventStatusType!]
  not: EventStatusTypeNullableFilter
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input EventUpdateInput {
  name: String
  slug: String
  eventType: StructureRelateToOneForUpdateInput
  content: JSON
  location: JSON
  startDate: DateTime
  endDate: DateTime
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToOneForUpdateInput
  author: UserRelateToOneForUpdateInput
  status: EventStatusType
  tags: TagRelateToManyForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  slug: String
  eventType: StructureRelateToOneForCreateInput
  content: JSON
  location: JSON
  startDate: DateTime
  endDate: DateTime
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToOneForCreateInput
  author: UserRelateToOneForCreateInput
  status: EventStatusType
  tags: TagRelateToManyForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Page {
  id: ID!
  title: String
  slug: String
  pageType: PagePageTypeType
  content: Page_content_Document
  status: PageStatusType
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  parent: Page
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  dateCreated: DateTime
  dateUpdated: DateTime
}

enum PagePageTypeType {
  landing
  homepage
  market
  blog
  about
  contact
  search
  notFound404
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum PageStatusType {
  draft
  published
  archived
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  pageType: PagePageTypeTypeNullableFilter
  status: PageStatusTypeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  parent: PageWhereInput
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input PagePageTypeTypeNullableFilter {
  equals: PagePageTypeType
  in: [PagePageTypeType!]
  notIn: [PagePageTypeType!]
  not: PagePageTypeTypeNullableFilter
}

input PageStatusTypeNullableFilter {
  equals: PageStatusType
  in: [PageStatusType!]
  notIn: [PageStatusType!]
  not: PageStatusTypeNullableFilter
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  pageType: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input PageUpdateInput {
  title: String
  slug: String
  pageType: PagePageTypeType
  content: JSON
  status: PageStatusType
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  parent: PageRelateToOneForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input PageRelateToOneForUpdateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
  disconnect: Boolean
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  slug: String
  pageType: PagePageTypeType
  content: JSON
  status: PageStatusType
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  parent: PageRelateToOneForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input PageRelateToOneForCreateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
}

type Trait {
  id: ID!
  name: String
  slug: String
  animalType: Structure
  content: Trait_content_Document
  status: TraitStatusType
  featuredImage: Asset
  media(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0): [Asset!]
  mediaCount(where: AssetWhereInput! = {}): Int
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Trait_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum TraitStatusType {
  draft
  published
  archived
}

input TraitWhereUniqueInput {
  id: ID
}

input TraitWhereInput {
  AND: [TraitWhereInput!]
  OR: [TraitWhereInput!]
  NOT: [TraitWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  animalType: StructureWhereInput
  status: TraitStatusTypeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetManyRelationFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input TraitStatusTypeNullableFilter {
  equals: TraitStatusType
  in: [TraitStatusType!]
  notIn: [TraitStatusType!]
  not: TraitStatusTypeNullableFilter
}

input TraitOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input TraitUpdateInput {
  name: String
  slug: String
  animalType: StructureRelateToOneForUpdateInput
  content: JSON
  status: TraitStatusType
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input TraitUpdateArgs {
  where: TraitWhereUniqueInput!
  data: TraitUpdateInput!
}

input TraitCreateInput {
  name: String
  slug: String
  animalType: StructureRelateToOneForCreateInput
  content: JSON
  status: TraitStatusType
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Customer {
  id: ID!
  user(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  userCount(where: UserWhereInput! = {}): Int
  customerType: Structure
  stripeCustomerId: String
  subscription: Subscription
  status: CustomerStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

enum CustomerStatusType {
  draft
  published
  archived
}

input CustomerWhereUniqueInput {
  id: ID
}

input CustomerWhereInput {
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
  id: IDFilter
  user: UserManyRelationFilter
  customerType: StructureWhereInput
  stripeCustomerId: StringFilter
  subscription: SubscriptionWhereInput
  status: CustomerStatusTypeNullableFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input CustomerStatusTypeNullableFilter {
  equals: CustomerStatusType
  in: [CustomerStatusType!]
  notIn: [CustomerStatusType!]
  not: CustomerStatusTypeNullableFilter
}

input CustomerOrderByInput {
  id: OrderDirection
  stripeCustomerId: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input CustomerUpdateInput {
  user: UserRelateToManyForUpdateInput
  customerType: StructureRelateToOneForUpdateInput
  stripeCustomerId: String
  subscription: SubscriptionRelateToOneForUpdateInput
  status: CustomerStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input SubscriptionRelateToOneForUpdateInput {
  create: SubscriptionCreateInput
  connect: SubscriptionWhereUniqueInput
  disconnect: Boolean
}

input CustomerUpdateArgs {
  where: CustomerWhereUniqueInput!
  data: CustomerUpdateInput!
}

input CustomerCreateInput {
  user: UserRelateToManyForCreateInput
  customerType: StructureRelateToOneForCreateInput
  stripeCustomerId: String
  subscription: SubscriptionRelateToOneForCreateInput
  status: CustomerStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input SubscriptionRelateToOneForCreateInput {
  create: SubscriptionCreateInput
  connect: SubscriptionWhereUniqueInput
}

type Listing {
  id: ID!
  title: String
  slug: String
  listingType: Structure
  price: String
  description: Listing_description_Document
  store: Store
  stripeProductId: String
  status: ListingStatusType
  featuredImage: Asset
  media: Asset
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Listing_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum ListingStatusType {
  draft
  published
  archived
}

input ListingWhereUniqueInput {
  id: ID
}

input ListingWhereInput {
  AND: [ListingWhereInput!]
  OR: [ListingWhereInput!]
  NOT: [ListingWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  listingType: StructureWhereInput
  price: StringFilter
  store: StoreWhereInput
  stripeProductId: StringFilter
  status: ListingStatusTypeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetWhereInput
  author: UserWhereInput
  tags: TagManyRelationFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input ListingStatusTypeNullableFilter {
  equals: ListingStatusType
  in: [ListingStatusType!]
  notIn: [ListingStatusType!]
  not: ListingStatusTypeNullableFilter
}

input ListingOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  price: OrderDirection
  stripeProductId: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input ListingUpdateInput {
  title: String
  slug: String
  listingType: StructureRelateToOneForUpdateInput
  price: String
  description: JSON
  store: StoreRelateToOneForUpdateInput
  stripeProductId: String
  status: ListingStatusType
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToOneForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input StoreRelateToOneForUpdateInput {
  create: StoreCreateInput
  connect: StoreWhereUniqueInput
  disconnect: Boolean
}

input ListingUpdateArgs {
  where: ListingWhereUniqueInput!
  data: ListingUpdateInput!
}

input ListingCreateInput {
  title: String
  slug: String
  listingType: StructureRelateToOneForCreateInput
  price: String
  description: JSON
  store: StoreRelateToOneForCreateInput
  stripeProductId: String
  status: ListingStatusType
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToOneForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input StoreRelateToOneForCreateInput {
  create: StoreCreateInput
  connect: StoreWhereUniqueInput
}

type Store {
  id: ID!
  name: String
  slug: String
  storeType: Structure
  description: Store_description_Document
  listings: Listing
  location: JSON
  stripeStoreId: String
  status: StoreStatusType
  featuredImage: Asset
  media: Asset
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Store_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum StoreStatusType {
  draft
  published
  archived
}

input StoreWhereUniqueInput {
  id: ID
}

input StoreWhereInput {
  AND: [StoreWhereInput!]
  OR: [StoreWhereInput!]
  NOT: [StoreWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  storeType: StructureWhereInput
  listings: ListingWhereInput
  stripeStoreId: StringFilter
  status: StoreStatusTypeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetWhereInput
  author: UserWhereInput
  tags: TagManyRelationFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input StoreStatusTypeNullableFilter {
  equals: StoreStatusType
  in: [StoreStatusType!]
  notIn: [StoreStatusType!]
  not: StoreStatusTypeNullableFilter
}

input StoreOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  stripeStoreId: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input StoreUpdateInput {
  name: String
  slug: String
  storeType: StructureRelateToOneForUpdateInput
  description: JSON
  listings: ListingRelateToOneForUpdateInput
  location: JSON
  stripeStoreId: String
  status: StoreStatusType
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToOneForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input ListingRelateToOneForUpdateInput {
  create: ListingCreateInput
  connect: ListingWhereUniqueInput
  disconnect: Boolean
}

input StoreUpdateArgs {
  where: StoreWhereUniqueInput!
  data: StoreUpdateInput!
}

input StoreCreateInput {
  name: String
  slug: String
  storeType: StructureRelateToOneForCreateInput
  description: JSON
  listings: ListingRelateToOneForCreateInput
  location: JSON
  stripeStoreId: String
  status: StoreStatusType
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToOneForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input ListingRelateToOneForCreateInput {
  create: ListingCreateInput
  connect: ListingWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  slug: String
  description: Category_description_Document
  parent: Category
  taxonomy(where: TaxonomyWhereInput! = {}, orderBy: [TaxonomyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Taxonomy!]
  taxonomyCount(where: TaxonomyWhereInput! = {}): Int
  asset: Asset
  meta: JSON
  children(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Category!]
  childrenCount(where: CategoryWhereInput! = {}): Int
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0): [Group!]
  groupsCount(where: GroupWhereInput! = {}): Int
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Category_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  parent: CategoryWhereInput
  taxonomy: TaxonomyManyRelationFilter
  asset: AssetWhereInput
  children: CategoryManyRelationFilter
  groups: GroupManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input TaxonomyManyRelationFilter {
  every: TaxonomyWhereInput
  some: TaxonomyWhereInput
  none: TaxonomyWhereInput
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input GroupManyRelationFilter {
  every: GroupWhereInput
  some: GroupWhereInput
  none: GroupWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input CategoryUpdateInput {
  name: String
  slug: String
  description: JSON
  parent: CategoryRelateToOneForUpdateInput
  taxonomy: TaxonomyRelateToManyForUpdateInput
  asset: AssetRelateToOneForUpdateInput
  meta: JSON
  children: CategoryRelateToManyForUpdateInput
  groups: GroupRelateToManyForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input TaxonomyRelateToManyForUpdateInput {
  disconnect: [TaxonomyWhereUniqueInput!]
  set: [TaxonomyWhereUniqueInput!]
  create: [TaxonomyCreateInput!]
  connect: [TaxonomyWhereUniqueInput!]
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input GroupRelateToManyForUpdateInput {
  disconnect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  create: [GroupCreateInput!]
  connect: [GroupWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  slug: String
  description: JSON
  parent: CategoryRelateToOneForCreateInput
  taxonomy: TaxonomyRelateToManyForCreateInput
  asset: AssetRelateToOneForCreateInput
  meta: JSON
  children: CategoryRelateToManyForCreateInput
  groups: GroupRelateToManyForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input TaxonomyRelateToManyForCreateInput {
  create: [TaxonomyCreateInput!]
  connect: [TaxonomyWhereUniqueInput!]
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input GroupRelateToManyForCreateInput {
  create: [GroupCreateInput!]
  connect: [GroupWhereUniqueInput!]
}

type Collection {
  id: ID!
  name: String
  handle: String
  author: User
  status: CollectionStatusType
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  data: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
}

enum CollectionStatusType {
  draft
  published
  archived
}

input CollectionWhereUniqueInput {
  id: ID
  handle: String
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  NOT: [CollectionWhereInput!]
  id: IDFilter
  name: StringFilter
  handle: StringFilter
  author: UserWhereInput
  status: CollectionStatusTypeNullableFilter
  tags: TagManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input CollectionStatusTypeNullableFilter {
  equals: CollectionStatusType
  in: [CollectionStatusType!]
  notIn: [CollectionStatusType!]
  not: CollectionStatusTypeNullableFilter
}

input CollectionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input CollectionUpdateInput {
  name: String
  handle: String
  author: UserRelateToOneForUpdateInput
  status: CollectionStatusType
  tags: TagRelateToManyForUpdateInput
  data: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
}

input CollectionUpdateArgs {
  where: CollectionWhereUniqueInput!
  data: CollectionUpdateInput!
}

input CollectionCreateInput {
  name: String
  handle: String
  author: UserRelateToOneForCreateInput
  status: CollectionStatusType
  tags: TagRelateToManyForCreateInput
  data: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Structure {
  id: ID!
  name: String
  handle: String
  data: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
}

input StructureWhereUniqueInput {
  id: ID
  handle: String
}

input StructureWhereInput {
  AND: [StructureWhereInput!]
  OR: [StructureWhereInput!]
  NOT: [StructureWhereInput!]
  id: IDFilter
  name: StringFilter
  handle: StringFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input StructureOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input StructureUpdateInput {
  name: String
  handle: String
  data: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
}

input StructureUpdateArgs {
  where: StructureWhereUniqueInput!
  data: StructureUpdateInput!
}

input StructureCreateInput {
  name: String
  handle: String
  data: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Tag {
  id: ID!
  name: String
  slug: String
  description: Tag_description_Document
  parent: Tag
  taxonomy: TagTaxonomyType
  asset: Asset
  listings(where: ListingWhereInput! = {}, orderBy: [ListingOrderByInput!]! = [], take: Int, skip: Int! = 0): [Listing!]
  listingsCount(where: ListingWhereInput! = {}): Int
  stores(where: StoreWhereInput! = {}, orderBy: [StoreOrderByInput!]! = [], take: Int, skip: Int! = 0): [Store!]
  storesCount(where: StoreWhereInput! = {}): Int
  animals(where: AnimalWhereInput! = {}, orderBy: [AnimalOrderByInput!]! = [], take: Int, skip: Int! = 0): [Animal!]
  animalsCount(where: AnimalWhereInput! = {}): Int
  articles(where: ArticleWhereInput! = {}, orderBy: [ArticleOrderByInput!]! = [], take: Int, skip: Int! = 0): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  traits(where: TraitWhereInput! = {}, orderBy: [TraitOrderByInput!]! = [], take: Int, skip: Int! = 0): [Trait!]
  traitsCount(where: TraitWhereInput! = {}): Int
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Tag_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum TagTaxonomyType {
  posts
  listings
  events
  groups
  articles
  pets
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  parent: TagWhereInput
  taxonomy: TagTaxonomyTypeNullableFilter
  asset: AssetWhereInput
  listings: ListingManyRelationFilter
  stores: StoreManyRelationFilter
  animals: AnimalManyRelationFilter
  articles: ArticleManyRelationFilter
  events: EventManyRelationFilter
  pages: PageManyRelationFilter
  traits: TraitManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input TagTaxonomyTypeNullableFilter {
  equals: TagTaxonomyType
  in: [TagTaxonomyType!]
  notIn: [TagTaxonomyType!]
  not: TagTaxonomyTypeNullableFilter
}

input ListingManyRelationFilter {
  every: ListingWhereInput
  some: ListingWhereInput
  none: ListingWhereInput
}

input StoreManyRelationFilter {
  every: StoreWhereInput
  some: StoreWhereInput
  none: StoreWhereInput
}

input AnimalManyRelationFilter {
  every: AnimalWhereInput
  some: AnimalWhereInput
  none: AnimalWhereInput
}

input ArticleManyRelationFilter {
  every: ArticleWhereInput
  some: ArticleWhereInput
  none: ArticleWhereInput
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input PageManyRelationFilter {
  every: PageWhereInput
  some: PageWhereInput
  none: PageWhereInput
}

input TraitManyRelationFilter {
  every: TraitWhereInput
  some: TraitWhereInput
  none: TraitWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  taxonomy: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input TagUpdateInput {
  name: String
  slug: String
  description: JSON
  parent: TagRelateToOneForUpdateInput
  taxonomy: TagTaxonomyType
  asset: AssetRelateToOneForUpdateInput
  listings: ListingRelateToManyForUpdateInput
  stores: StoreRelateToManyForUpdateInput
  animals: AnimalRelateToManyForUpdateInput
  articles: ArticleRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  pages: PageRelateToManyForUpdateInput
  traits: TraitRelateToManyForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input ListingRelateToManyForUpdateInput {
  disconnect: [ListingWhereUniqueInput!]
  set: [ListingWhereUniqueInput!]
  create: [ListingCreateInput!]
  connect: [ListingWhereUniqueInput!]
}

input StoreRelateToManyForUpdateInput {
  disconnect: [StoreWhereUniqueInput!]
  set: [StoreWhereUniqueInput!]
  create: [StoreCreateInput!]
  connect: [StoreWhereUniqueInput!]
}

input AnimalRelateToManyForUpdateInput {
  disconnect: [AnimalWhereUniqueInput!]
  set: [AnimalWhereUniqueInput!]
  create: [AnimalCreateInput!]
  connect: [AnimalWhereUniqueInput!]
}

input ArticleRelateToManyForUpdateInput {
  disconnect: [ArticleWhereUniqueInput!]
  set: [ArticleWhereUniqueInput!]
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input PageRelateToManyForUpdateInput {
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input TraitRelateToManyForUpdateInput {
  disconnect: [TraitWhereUniqueInput!]
  set: [TraitWhereUniqueInput!]
  create: [TraitCreateInput!]
  connect: [TraitWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  slug: String
  description: JSON
  parent: TagRelateToOneForCreateInput
  taxonomy: TagTaxonomyType
  asset: AssetRelateToOneForCreateInput
  listings: ListingRelateToManyForCreateInput
  stores: StoreRelateToManyForCreateInput
  animals: AnimalRelateToManyForCreateInput
  articles: ArticleRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  pages: PageRelateToManyForCreateInput
  traits: TraitRelateToManyForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input ListingRelateToManyForCreateInput {
  create: [ListingCreateInput!]
  connect: [ListingWhereUniqueInput!]
}

input StoreRelateToManyForCreateInput {
  create: [StoreCreateInput!]
  connect: [StoreWhereUniqueInput!]
}

input AnimalRelateToManyForCreateInput {
  create: [AnimalCreateInput!]
  connect: [AnimalWhereUniqueInput!]
}

input ArticleRelateToManyForCreateInput {
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input PageRelateToManyForCreateInput {
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input TraitRelateToManyForCreateInput {
  create: [TraitCreateInput!]
  connect: [TraitWhereUniqueInput!]
}

type Taxonomy {
  id: ID!
  name: String
  slug: String
  description: Taxonomy_description_Document
  meta: JSON
}

type Taxonomy_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input TaxonomyWhereUniqueInput {
  id: ID
  name: String
}

input TaxonomyWhereInput {
  AND: [TaxonomyWhereInput!]
  OR: [TaxonomyWhereInput!]
  NOT: [TaxonomyWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
}

input TaxonomyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input TaxonomyUpdateInput {
  name: String
  slug: String
  description: JSON
  meta: JSON
}

input TaxonomyUpdateArgs {
  where: TaxonomyWhereUniqueInput!
  data: TaxonomyUpdateInput!
}

input TaxonomyCreateInput {
  name: String
  slug: String
  description: JSON
  meta: JSON
}

type Asset {
  id: ID!
  file: FileFieldOutput
  folder: AssetFolderType
  image: CloudinaryImage_File
  altTitle: String
  caption: String
  status: AssetStatusType
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  dateCreated: DateTime
  dateUpdated: DateTime
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

enum AssetFolderType {
  draft
  published
  archived
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

enum AssetStatusType {
  draft
  published
  archived
}

input AssetWhereUniqueInput {
  id: ID
}

input AssetWhereInput {
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
  id: IDFilter
  folder: AssetFolderTypeNullableFilter
  altTitle: StringFilter
  caption: StringFilter
  status: AssetStatusTypeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input AssetFolderTypeNullableFilter {
  equals: AssetFolderType
  in: [AssetFolderType!]
  notIn: [AssetFolderType!]
  not: AssetFolderTypeNullableFilter
}

input AssetStatusTypeNullableFilter {
  equals: AssetStatusType
  in: [AssetStatusType!]
  notIn: [AssetStatusType!]
  not: AssetStatusTypeNullableFilter
}

input AssetOrderByInput {
  id: OrderDirection
  folder: OrderDirection
  altTitle: OrderDirection
  caption: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input AssetUpdateInput {
  file: FileFieldInput
  folder: AssetFolderType
  image: Upload
  altTitle: String
  caption: String
  status: AssetStatusType
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AssetUpdateArgs {
  where: AssetWhereUniqueInput!
  data: AssetUpdateInput!
}

input AssetCreateInput {
  file: FileFieldInput
  folder: AssetFolderType
  image: Upload
  altTitle: String
  caption: String
  status: AssetStatusType
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

type User {
  id: ID!
  name: String
  username: String
  email: String
  firstName: String
  lastName: String
  password: PasswordState
  phoneNumber: String
  about: User_about_Document
  website: String
  termsAndCondition: Boolean
  location: JSON
  businessCategory: UserBusinessCategoryType
  type: UserTypeType
  tokenExpiryTime: DateTime
  avatar: Asset
  coverPhoto: Asset
  role: Role
  following(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  followingCount(where: UserWhereInput! = {}): Int
  followers(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  followersCount(where: UserWhereInput! = {}): Int
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0): [Group!]
  groupsCount(where: GroupWhereInput! = {}): Int
  pinnedGroups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0): [Group!]
  pinnedGroupsCount(where: GroupWhereInput! = {}): Int
  groupInvites(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0): [Group!]
  groupInvitesCount(where: GroupWhereInput! = {}): Int
  groupManager(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0): [Group!]
  groupManagerCount(where: GroupWhereInput! = {}): Int
  listings(where: ListingWhereInput! = {}, orderBy: [ListingOrderByInput!]! = [], take: Int, skip: Int! = 0): [Listing!]
  listingsCount(where: ListingWhereInput! = {}): Int
  animals(where: AnimalWhereInput! = {}, orderBy: [AnimalOrderByInput!]! = [], take: Int, skip: Int! = 0): [Animal!]
  animalsCount(where: AnimalWhereInput! = {}): Int
  pets(where: PetWhereInput! = {}, orderBy: [PetOrderByInput!]! = [], take: Int, skip: Int! = 0): [Pet!]
  petsCount(where: PetWhereInput! = {}): Int
  articles(where: ArticleWhereInput! = {}, orderBy: [ArticleOrderByInput!]! = [], take: Int, skip: Int! = 0): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  customer: Customer
  store(where: StoreWhereInput! = {}, orderBy: [StoreOrderByInput!]! = [], take: Int, skip: Int! = 0): [Store!]
  storeCount(where: StoreWhereInput! = {}): Int
  assets: Asset
  traits(where: TraitWhereInput! = {}, orderBy: [TraitOrderByInput!]! = [], take: Int, skip: Int! = 0): [Trait!]
  traitsCount(where: TraitWhereInput! = {}): Int
  saved(where: SavedWhereInput! = {}, orderBy: [SavedOrderByInput!]! = [], take: Int, skip: Int! = 0): [Saved!]
  savedCount(where: SavedWhereInput! = {}): Int
  favorite(where: FavoriteWhereInput! = {}, orderBy: [FavoriteOrderByInput!]! = [], take: Int, skip: Int! = 0): [Favorite!]
  favoriteCount(where: FavoriteWhereInput! = {}): Int
  otherAccounts(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  otherAccountsCount(where: UserWhereInput! = {}): Int
  magicToken: String
  status: UserStatusType
  metadata: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: PasswordState
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

type User_about_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum UserBusinessCategoryType {
  petStore
  expo
  vetClinic
  breeder
  petRescue
  nonProfit
  other
}

enum UserTypeType {
  user
  business
}

enum UserStatusType {
  active
  pending
  suspended
  locked
  inactive
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  username: StringFilter
  email: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  phoneNumber: StringFilter
  website: StringFilter
  termsAndCondition: BooleanFilter
  businessCategory: UserBusinessCategoryTypeNullableFilter
  type: UserTypeTypeNullableFilter
  tokenExpiryTime: DateTimeNullableFilter
  avatar: AssetWhereInput
  coverPhoto: AssetWhereInput
  role: RoleWhereInput
  following: UserManyRelationFilter
  followers: UserManyRelationFilter
  groups: GroupManyRelationFilter
  pinnedGroups: GroupManyRelationFilter
  groupInvites: GroupManyRelationFilter
  groupManager: GroupManyRelationFilter
  listings: ListingManyRelationFilter
  animals: AnimalManyRelationFilter
  pets: PetManyRelationFilter
  articles: ArticleManyRelationFilter
  events: EventManyRelationFilter
  pages: PageManyRelationFilter
  customer: CustomerWhereInput
  store: StoreManyRelationFilter
  assets: AssetWhereInput
  traits: TraitManyRelationFilter
  saved: SavedManyRelationFilter
  favorite: FavoriteManyRelationFilter
  otherAccounts: UserManyRelationFilter
  magicToken: StringFilter
  status: UserStatusTypeNullableFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
  magicAuthToken: PasswordFilter
  magicAuthIssuedAt: DateTimeNullableFilter
  magicAuthRedeemedAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserBusinessCategoryTypeNullableFilter {
  equals: UserBusinessCategoryType
  in: [UserBusinessCategoryType!]
  notIn: [UserBusinessCategoryType!]
  not: UserBusinessCategoryTypeNullableFilter
}

input UserTypeTypeNullableFilter {
  equals: UserTypeType
  in: [UserTypeType!]
  notIn: [UserTypeType!]
  not: UserTypeTypeNullableFilter
}

input PetManyRelationFilter {
  every: PetWhereInput
  some: PetWhereInput
  none: PetWhereInput
}

input SavedManyRelationFilter {
  every: SavedWhereInput
  some: SavedWhereInput
  none: SavedWhereInput
}

input FavoriteManyRelationFilter {
  every: FavoriteWhereInput
  some: FavoriteWhereInput
  none: FavoriteWhereInput
}

input UserStatusTypeNullableFilter {
  equals: UserStatusType
  in: [UserStatusType!]
  notIn: [UserStatusType!]
  not: UserStatusTypeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  username: OrderDirection
  email: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  phoneNumber: OrderDirection
  website: OrderDirection
  termsAndCondition: OrderDirection
  businessCategory: OrderDirection
  type: OrderDirection
  tokenExpiryTime: OrderDirection
  magicToken: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
  magicAuthIssuedAt: OrderDirection
  magicAuthRedeemedAt: OrderDirection
}

input UserUpdateInput {
  name: String
  username: String
  email: String
  firstName: String
  lastName: String
  password: String
  phoneNumber: String
  about: JSON
  website: String
  termsAndCondition: Boolean
  location: JSON
  businessCategory: UserBusinessCategoryType
  type: UserTypeType
  tokenExpiryTime: DateTime
  avatar: AssetRelateToOneForUpdateInput
  coverPhoto: AssetRelateToOneForUpdateInput
  role: RoleRelateToOneForUpdateInput
  following: UserRelateToManyForUpdateInput
  followers: UserRelateToManyForUpdateInput
  groups: GroupRelateToManyForUpdateInput
  pinnedGroups: GroupRelateToManyForUpdateInput
  groupInvites: GroupRelateToManyForUpdateInput
  groupManager: GroupRelateToManyForUpdateInput
  listings: ListingRelateToManyForUpdateInput
  animals: AnimalRelateToManyForUpdateInput
  pets: PetRelateToManyForUpdateInput
  articles: ArticleRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  pages: PageRelateToManyForUpdateInput
  customer: CustomerRelateToOneForUpdateInput
  store: StoreRelateToManyForUpdateInput
  assets: AssetRelateToOneForUpdateInput
  traits: TraitRelateToManyForUpdateInput
  saved: SavedRelateToManyForUpdateInput
  favorite: FavoriteRelateToManyForUpdateInput
  otherAccounts: UserRelateToManyForUpdateInput
  magicToken: String
  status: UserStatusType
  metadata: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input PetRelateToManyForUpdateInput {
  disconnect: [PetWhereUniqueInput!]
  set: [PetWhereUniqueInput!]
  create: [PetCreateInput!]
  connect: [PetWhereUniqueInput!]
}

input CustomerRelateToOneForUpdateInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
  disconnect: Boolean
}

input SavedRelateToManyForUpdateInput {
  disconnect: [SavedWhereUniqueInput!]
  set: [SavedWhereUniqueInput!]
  create: [SavedCreateInput!]
  connect: [SavedWhereUniqueInput!]
}

input FavoriteRelateToManyForUpdateInput {
  disconnect: [FavoriteWhereUniqueInput!]
  set: [FavoriteWhereUniqueInput!]
  create: [FavoriteCreateInput!]
  connect: [FavoriteWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  username: String
  email: String
  firstName: String
  lastName: String
  password: String
  phoneNumber: String
  about: JSON
  website: String
  termsAndCondition: Boolean! = false
  location: JSON
  businessCategory: UserBusinessCategoryType
  type: UserTypeType
  tokenExpiryTime: DateTime
  avatar: AssetRelateToOneForCreateInput
  coverPhoto: AssetRelateToOneForCreateInput
  role: RoleRelateToOneForCreateInput
  following: UserRelateToManyForCreateInput
  followers: UserRelateToManyForCreateInput
  groups: GroupRelateToManyForCreateInput
  pinnedGroups: GroupRelateToManyForCreateInput
  groupInvites: GroupRelateToManyForCreateInput
  groupManager: GroupRelateToManyForCreateInput
  listings: ListingRelateToManyForCreateInput
  animals: AnimalRelateToManyForCreateInput
  pets: PetRelateToManyForCreateInput
  articles: ArticleRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  pages: PageRelateToManyForCreateInput
  customer: CustomerRelateToOneForCreateInput
  store: StoreRelateToManyForCreateInput
  assets: AssetRelateToOneForCreateInput
  traits: TraitRelateToManyForCreateInput
  saved: SavedRelateToManyForCreateInput
  favorite: FavoriteRelateToManyForCreateInput
  otherAccounts: UserRelateToManyForCreateInput
  magicToken: String
  status: UserStatusType
  metadata: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input PetRelateToManyForCreateInput {
  create: [PetCreateInput!]
  connect: [PetWhereUniqueInput!]
}

input CustomerRelateToOneForCreateInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
}

input SavedRelateToManyForCreateInput {
  create: [SavedCreateInput!]
  connect: [SavedWhereUniqueInput!]
}

input FavoriteRelateToManyForCreateInput {
  create: [FavoriteCreateInput!]
  connect: [FavoriteWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  handle: String
  description: String
  dateCreated: DateTime
  dateUpdated: DateTime
  permissions: JSON
  canCreateUser: Boolean
  canReadUser: Boolean
  canUpdateUser: Boolean
  canDeleteUser: Boolean
  canCreateRole: Boolean
  canReadRole: Boolean
  canUpdateRole: Boolean
  canDeleteRole: Boolean
  canCreateAsset: Boolean
  canReadAsset: Boolean
  canUpdateAsset: Boolean
  canDeleteAsset: Boolean
  canUpdatePets: Boolean
  canDeletePets: Boolean
  canUpdateTaxonomy: Boolean
  canDeleteTaxonomy: Boolean
  canCreateCategory: Boolean
  canReadCategory: Boolean
  canUpdateCategory: Boolean
  canDeleteCategory: Boolean
  canCreateCollection: Boolean
  canReadCollection: Boolean
  canUpdateCollection: Boolean
  canDeleteCollection: Boolean
  canCreateGlobal: Boolean
  canReadGlobal: Boolean
  canUpdateGlobal: Boolean
  canDeleteGlobal: Boolean
  canCreateStructure: Boolean
  canReadStructure: Boolean
  canUpdateStructure: Boolean
  canDeleteStructure: Boolean
  canCreateTrait: Boolean
  canReadTrait: Boolean
  canUpdateTrait: Boolean
  canDeleteTrait: Boolean
  canUpdateGroups: Boolean
  canDeleteGroups: Boolean
  canCreatePage: Boolean
  canReadPage: Boolean
  canUpdatePage: Boolean
  canDeletePage: Boolean
  canCreateEvent: Boolean
  canReadEvent: Boolean
  canUpdateEvent: Boolean
  canDeleteEvent: Boolean
  canCreateAnimal: Boolean
  canReadAnimal: Boolean
  canUpdateAnimal: Boolean
  canDeleteAnimal: Boolean
  canCreateArticle: Boolean
  canReadArticle: Boolean
  canUpdateArticle: Boolean
  canDeleteArticle: Boolean
  canCreateSubscription: Boolean
  canReadSubscription: Boolean
  canUpdateSubscription: Boolean
  canDeleteSubscription: Boolean
  canCreateSetting: Boolean
  canReadSetting: Boolean
  canUpdateSetting: Boolean
  canDeleteSetting: Boolean
  canCreateFeature: Boolean
  canReadFeature: Boolean
  canUpdateFeature: Boolean
  canDeleteFeature: Boolean
  canCreateTag: Boolean
  canReadTag: Boolean
  canUpdateTag: Boolean
  canDeleteTag: Boolean
  canCreateSaved: Boolean
  canReadSaved: Boolean
  canUpdateSaved: Boolean
  canDeleteSaved: Boolean
  canCreateFavorite: Boolean
  canReadFavorite: Boolean
  canUpdateFavorite: Boolean
  canDeleteFavorite: Boolean
  canCreateStore: Boolean
  canReadStore: Boolean
  canUpdateStore: Boolean
  canDeleteStore: Boolean
  canCreateListing: Boolean
  canReadListing: Boolean
  canUpdateListing: Boolean
  canDeleteListing: Boolean
  canCreateCustomer: Boolean
  canReadCustomer: Boolean
  canUpdateCustomer: Boolean
  canDeleteCustomer: Boolean
  canEditSocialUser: Boolean
  canAssignRoleToSocialUser: Boolean
  canBanSocialUser: Boolean
  canCreateSocialRole: Boolean
  canEditSocialRole: Boolean
  canDeleteSocialRole: Boolean
  canEditChannel: Boolean
  canSetRateLimit: Boolean
  canMuteChannel: Boolean
  canCloseChannel: Boolean
  canEditMessage: Boolean
  canDeleteMessage: Boolean
  canEditCommunity: Boolean
  canDeleteCommunity: Boolean
  canaddUserToCommunity: Boolean
  caneditUserCommunityInformation: Boolean
  canRemoveUserFromCommunity: Boolean
  canMuteUserInCommunity: Boolean
  canBanUserInCommunity: Boolean
  canEditPostInFeed: Boolean
  canDeletePostInFeed: Boolean
  canEditCommentInFeed: Boolean
  canDeleteCommentInFeed: Boolean
  canCreateSocialCategory: Boolean
  canUpdateSocialCategory: Boolean
  canDeleteSocialCategory: Boolean
  assignedTo(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
  name: String
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  handle: StringFilter
  description: StringFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
  canCreateUser: BooleanFilter
  canReadUser: BooleanFilter
  canUpdateUser: BooleanFilter
  canDeleteUser: BooleanFilter
  canCreateRole: BooleanFilter
  canReadRole: BooleanFilter
  canUpdateRole: BooleanFilter
  canDeleteRole: BooleanFilter
  canCreateAsset: BooleanFilter
  canReadAsset: BooleanFilter
  canUpdateAsset: BooleanFilter
  canDeleteAsset: BooleanFilter
  canUpdatePets: BooleanFilter
  canDeletePets: BooleanFilter
  canUpdateTaxonomy: BooleanFilter
  canDeleteTaxonomy: BooleanFilter
  canCreateCategory: BooleanFilter
  canReadCategory: BooleanFilter
  canUpdateCategory: BooleanFilter
  canDeleteCategory: BooleanFilter
  canCreateCollection: BooleanFilter
  canReadCollection: BooleanFilter
  canUpdateCollection: BooleanFilter
  canDeleteCollection: BooleanFilter
  canCreateGlobal: BooleanFilter
  canReadGlobal: BooleanFilter
  canUpdateGlobal: BooleanFilter
  canDeleteGlobal: BooleanFilter
  canCreateStructure: BooleanFilter
  canReadStructure: BooleanFilter
  canUpdateStructure: BooleanFilter
  canDeleteStructure: BooleanFilter
  canCreateTrait: BooleanFilter
  canReadTrait: BooleanFilter
  canUpdateTrait: BooleanFilter
  canDeleteTrait: BooleanFilter
  canUpdateGroups: BooleanFilter
  canDeleteGroups: BooleanFilter
  canCreatePage: BooleanFilter
  canReadPage: BooleanFilter
  canUpdatePage: BooleanFilter
  canDeletePage: BooleanFilter
  canCreateEvent: BooleanFilter
  canReadEvent: BooleanFilter
  canUpdateEvent: BooleanFilter
  canDeleteEvent: BooleanFilter
  canCreateAnimal: BooleanFilter
  canReadAnimal: BooleanFilter
  canUpdateAnimal: BooleanFilter
  canDeleteAnimal: BooleanFilter
  canCreateArticle: BooleanFilter
  canReadArticle: BooleanFilter
  canUpdateArticle: BooleanFilter
  canDeleteArticle: BooleanFilter
  canCreateSubscription: BooleanFilter
  canReadSubscription: BooleanFilter
  canUpdateSubscription: BooleanFilter
  canDeleteSubscription: BooleanFilter
  canCreateSetting: BooleanFilter
  canReadSetting: BooleanFilter
  canUpdateSetting: BooleanFilter
  canDeleteSetting: BooleanFilter
  canCreateFeature: BooleanFilter
  canReadFeature: BooleanFilter
  canUpdateFeature: BooleanFilter
  canDeleteFeature: BooleanFilter
  canCreateTag: BooleanFilter
  canReadTag: BooleanFilter
  canUpdateTag: BooleanFilter
  canDeleteTag: BooleanFilter
  canCreateSaved: BooleanFilter
  canReadSaved: BooleanFilter
  canUpdateSaved: BooleanFilter
  canDeleteSaved: BooleanFilter
  canCreateFavorite: BooleanFilter
  canReadFavorite: BooleanFilter
  canUpdateFavorite: BooleanFilter
  canDeleteFavorite: BooleanFilter
  canCreateStore: BooleanFilter
  canReadStore: BooleanFilter
  canUpdateStore: BooleanFilter
  canDeleteStore: BooleanFilter
  canCreateListing: BooleanFilter
  canReadListing: BooleanFilter
  canUpdateListing: BooleanFilter
  canDeleteListing: BooleanFilter
  canCreateCustomer: BooleanFilter
  canReadCustomer: BooleanFilter
  canUpdateCustomer: BooleanFilter
  canDeleteCustomer: BooleanFilter
  canEditSocialUser: BooleanFilter
  canAssignRoleToSocialUser: BooleanFilter
  canBanSocialUser: BooleanFilter
  canCreateSocialRole: BooleanFilter
  canEditSocialRole: BooleanFilter
  canDeleteSocialRole: BooleanFilter
  canEditChannel: BooleanFilter
  canSetRateLimit: BooleanFilter
  canMuteChannel: BooleanFilter
  canCloseChannel: BooleanFilter
  canEditMessage: BooleanFilter
  canDeleteMessage: BooleanFilter
  canEditCommunity: BooleanFilter
  canDeleteCommunity: BooleanFilter
  canaddUserToCommunity: BooleanFilter
  caneditUserCommunityInformation: BooleanFilter
  canRemoveUserFromCommunity: BooleanFilter
  canMuteUserInCommunity: BooleanFilter
  canBanUserInCommunity: BooleanFilter
  canEditPostInFeed: BooleanFilter
  canDeletePostInFeed: BooleanFilter
  canEditCommentInFeed: BooleanFilter
  canDeleteCommentInFeed: BooleanFilter
  canCreateSocialCategory: BooleanFilter
  canUpdateSocialCategory: BooleanFilter
  canDeleteSocialCategory: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  description: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
  canCreateUser: OrderDirection
  canReadUser: OrderDirection
  canUpdateUser: OrderDirection
  canDeleteUser: OrderDirection
  canCreateRole: OrderDirection
  canReadRole: OrderDirection
  canUpdateRole: OrderDirection
  canDeleteRole: OrderDirection
  canCreateAsset: OrderDirection
  canReadAsset: OrderDirection
  canUpdateAsset: OrderDirection
  canDeleteAsset: OrderDirection
  canUpdatePets: OrderDirection
  canDeletePets: OrderDirection
  canUpdateTaxonomy: OrderDirection
  canDeleteTaxonomy: OrderDirection
  canCreateCategory: OrderDirection
  canReadCategory: OrderDirection
  canUpdateCategory: OrderDirection
  canDeleteCategory: OrderDirection
  canCreateCollection: OrderDirection
  canReadCollection: OrderDirection
  canUpdateCollection: OrderDirection
  canDeleteCollection: OrderDirection
  canCreateGlobal: OrderDirection
  canReadGlobal: OrderDirection
  canUpdateGlobal: OrderDirection
  canDeleteGlobal: OrderDirection
  canCreateStructure: OrderDirection
  canReadStructure: OrderDirection
  canUpdateStructure: OrderDirection
  canDeleteStructure: OrderDirection
  canCreateTrait: OrderDirection
  canReadTrait: OrderDirection
  canUpdateTrait: OrderDirection
  canDeleteTrait: OrderDirection
  canUpdateGroups: OrderDirection
  canDeleteGroups: OrderDirection
  canCreatePage: OrderDirection
  canReadPage: OrderDirection
  canUpdatePage: OrderDirection
  canDeletePage: OrderDirection
  canCreateEvent: OrderDirection
  canReadEvent: OrderDirection
  canUpdateEvent: OrderDirection
  canDeleteEvent: OrderDirection
  canCreateAnimal: OrderDirection
  canReadAnimal: OrderDirection
  canUpdateAnimal: OrderDirection
  canDeleteAnimal: OrderDirection
  canCreateArticle: OrderDirection
  canReadArticle: OrderDirection
  canUpdateArticle: OrderDirection
  canDeleteArticle: OrderDirection
  canCreateSubscription: OrderDirection
  canReadSubscription: OrderDirection
  canUpdateSubscription: OrderDirection
  canDeleteSubscription: OrderDirection
  canCreateSetting: OrderDirection
  canReadSetting: OrderDirection
  canUpdateSetting: OrderDirection
  canDeleteSetting: OrderDirection
  canCreateFeature: OrderDirection
  canReadFeature: OrderDirection
  canUpdateFeature: OrderDirection
  canDeleteFeature: OrderDirection
  canCreateTag: OrderDirection
  canReadTag: OrderDirection
  canUpdateTag: OrderDirection
  canDeleteTag: OrderDirection
  canCreateSaved: OrderDirection
  canReadSaved: OrderDirection
  canUpdateSaved: OrderDirection
  canDeleteSaved: OrderDirection
  canCreateFavorite: OrderDirection
  canReadFavorite: OrderDirection
  canUpdateFavorite: OrderDirection
  canDeleteFavorite: OrderDirection
  canCreateStore: OrderDirection
  canReadStore: OrderDirection
  canUpdateStore: OrderDirection
  canDeleteStore: OrderDirection
  canCreateListing: OrderDirection
  canReadListing: OrderDirection
  canUpdateListing: OrderDirection
  canDeleteListing: OrderDirection
  canCreateCustomer: OrderDirection
  canReadCustomer: OrderDirection
  canUpdateCustomer: OrderDirection
  canDeleteCustomer: OrderDirection
  canEditSocialUser: OrderDirection
  canAssignRoleToSocialUser: OrderDirection
  canBanSocialUser: OrderDirection
  canCreateSocialRole: OrderDirection
  canEditSocialRole: OrderDirection
  canDeleteSocialRole: OrderDirection
  canEditChannel: OrderDirection
  canSetRateLimit: OrderDirection
  canMuteChannel: OrderDirection
  canCloseChannel: OrderDirection
  canEditMessage: OrderDirection
  canDeleteMessage: OrderDirection
  canEditCommunity: OrderDirection
  canDeleteCommunity: OrderDirection
  canaddUserToCommunity: OrderDirection
  caneditUserCommunityInformation: OrderDirection
  canRemoveUserFromCommunity: OrderDirection
  canMuteUserInCommunity: OrderDirection
  canBanUserInCommunity: OrderDirection
  canEditPostInFeed: OrderDirection
  canDeletePostInFeed: OrderDirection
  canEditCommentInFeed: OrderDirection
  canDeleteCommentInFeed: OrderDirection
  canCreateSocialCategory: OrderDirection
  canUpdateSocialCategory: OrderDirection
  canDeleteSocialCategory: OrderDirection
}

input RoleUpdateInput {
  name: String
  handle: String
  description: String
  dateCreated: DateTime
  dateUpdated: DateTime
  canCreateUser: Boolean
  canReadUser: Boolean
  canUpdateUser: Boolean
  canDeleteUser: Boolean
  canCreateRole: Boolean
  canReadRole: Boolean
  canUpdateRole: Boolean
  canDeleteRole: Boolean
  canCreateAsset: Boolean
  canReadAsset: Boolean
  canUpdateAsset: Boolean
  canDeleteAsset: Boolean
  canUpdatePets: Boolean
  canDeletePets: Boolean
  canUpdateTaxonomy: Boolean
  canDeleteTaxonomy: Boolean
  canCreateCategory: Boolean
  canReadCategory: Boolean
  canUpdateCategory: Boolean
  canDeleteCategory: Boolean
  canCreateCollection: Boolean
  canReadCollection: Boolean
  canUpdateCollection: Boolean
  canDeleteCollection: Boolean
  canCreateGlobal: Boolean
  canReadGlobal: Boolean
  canUpdateGlobal: Boolean
  canDeleteGlobal: Boolean
  canCreateStructure: Boolean
  canReadStructure: Boolean
  canUpdateStructure: Boolean
  canDeleteStructure: Boolean
  canCreateTrait: Boolean
  canReadTrait: Boolean
  canUpdateTrait: Boolean
  canDeleteTrait: Boolean
  canUpdateGroups: Boolean
  canDeleteGroups: Boolean
  canCreatePage: Boolean
  canReadPage: Boolean
  canUpdatePage: Boolean
  canDeletePage: Boolean
  canCreateEvent: Boolean
  canReadEvent: Boolean
  canUpdateEvent: Boolean
  canDeleteEvent: Boolean
  canCreateAnimal: Boolean
  canReadAnimal: Boolean
  canUpdateAnimal: Boolean
  canDeleteAnimal: Boolean
  canCreateArticle: Boolean
  canReadArticle: Boolean
  canUpdateArticle: Boolean
  canDeleteArticle: Boolean
  canCreateSubscription: Boolean
  canReadSubscription: Boolean
  canUpdateSubscription: Boolean
  canDeleteSubscription: Boolean
  canCreateSetting: Boolean
  canReadSetting: Boolean
  canUpdateSetting: Boolean
  canDeleteSetting: Boolean
  canCreateFeature: Boolean
  canReadFeature: Boolean
  canUpdateFeature: Boolean
  canDeleteFeature: Boolean
  canCreateTag: Boolean
  canReadTag: Boolean
  canUpdateTag: Boolean
  canDeleteTag: Boolean
  canCreateSaved: Boolean
  canReadSaved: Boolean
  canUpdateSaved: Boolean
  canDeleteSaved: Boolean
  canCreateFavorite: Boolean
  canReadFavorite: Boolean
  canUpdateFavorite: Boolean
  canDeleteFavorite: Boolean
  canCreateStore: Boolean
  canReadStore: Boolean
  canUpdateStore: Boolean
  canDeleteStore: Boolean
  canCreateListing: Boolean
  canReadListing: Boolean
  canUpdateListing: Boolean
  canDeleteListing: Boolean
  canCreateCustomer: Boolean
  canReadCustomer: Boolean
  canUpdateCustomer: Boolean
  canDeleteCustomer: Boolean
  canEditSocialUser: Boolean
  canAssignRoleToSocialUser: Boolean
  canBanSocialUser: Boolean
  canCreateSocialRole: Boolean
  canEditSocialRole: Boolean
  canDeleteSocialRole: Boolean
  canEditChannel: Boolean
  canSetRateLimit: Boolean
  canMuteChannel: Boolean
  canCloseChannel: Boolean
  canEditMessage: Boolean
  canDeleteMessage: Boolean
  canEditCommunity: Boolean
  canDeleteCommunity: Boolean
  canaddUserToCommunity: Boolean
  caneditUserCommunityInformation: Boolean
  canRemoveUserFromCommunity: Boolean
  canMuteUserInCommunity: Boolean
  canBanUserInCommunity: Boolean
  canEditPostInFeed: Boolean
  canDeletePostInFeed: Boolean
  canEditCommentInFeed: Boolean
  canDeleteCommentInFeed: Boolean
  canCreateSocialCategory: Boolean
  canUpdateSocialCategory: Boolean
  canDeleteSocialCategory: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  handle: String
  description: String
  dateCreated: DateTime
  dateUpdated: DateTime
  canCreateUser: Boolean
  canReadUser: Boolean
  canUpdateUser: Boolean
  canDeleteUser: Boolean
  canCreateRole: Boolean
  canReadRole: Boolean
  canUpdateRole: Boolean
  canDeleteRole: Boolean
  canCreateAsset: Boolean
  canReadAsset: Boolean
  canUpdateAsset: Boolean
  canDeleteAsset: Boolean
  canUpdatePets: Boolean
  canDeletePets: Boolean
  canUpdateTaxonomy: Boolean
  canDeleteTaxonomy: Boolean
  canCreateCategory: Boolean
  canReadCategory: Boolean
  canUpdateCategory: Boolean
  canDeleteCategory: Boolean
  canCreateCollection: Boolean
  canReadCollection: Boolean
  canUpdateCollection: Boolean
  canDeleteCollection: Boolean
  canCreateGlobal: Boolean
  canReadGlobal: Boolean
  canUpdateGlobal: Boolean
  canDeleteGlobal: Boolean
  canCreateStructure: Boolean
  canReadStructure: Boolean
  canUpdateStructure: Boolean
  canDeleteStructure: Boolean
  canCreateTrait: Boolean
  canReadTrait: Boolean
  canUpdateTrait: Boolean
  canDeleteTrait: Boolean
  canUpdateGroups: Boolean
  canDeleteGroups: Boolean
  canCreatePage: Boolean
  canReadPage: Boolean
  canUpdatePage: Boolean
  canDeletePage: Boolean
  canCreateEvent: Boolean
  canReadEvent: Boolean
  canUpdateEvent: Boolean
  canDeleteEvent: Boolean
  canCreateAnimal: Boolean
  canReadAnimal: Boolean
  canUpdateAnimal: Boolean
  canDeleteAnimal: Boolean
  canCreateArticle: Boolean
  canReadArticle: Boolean
  canUpdateArticle: Boolean
  canDeleteArticle: Boolean
  canCreateSubscription: Boolean
  canReadSubscription: Boolean
  canUpdateSubscription: Boolean
  canDeleteSubscription: Boolean
  canCreateSetting: Boolean
  canReadSetting: Boolean
  canUpdateSetting: Boolean
  canDeleteSetting: Boolean
  canCreateFeature: Boolean
  canReadFeature: Boolean
  canUpdateFeature: Boolean
  canDeleteFeature: Boolean
  canCreateTag: Boolean
  canReadTag: Boolean
  canUpdateTag: Boolean
  canDeleteTag: Boolean
  canCreateSaved: Boolean
  canReadSaved: Boolean
  canUpdateSaved: Boolean
  canDeleteSaved: Boolean
  canCreateFavorite: Boolean
  canReadFavorite: Boolean
  canUpdateFavorite: Boolean
  canDeleteFavorite: Boolean
  canCreateStore: Boolean
  canReadStore: Boolean
  canUpdateStore: Boolean
  canDeleteStore: Boolean
  canCreateListing: Boolean
  canReadListing: Boolean
  canUpdateListing: Boolean
  canDeleteListing: Boolean
  canCreateCustomer: Boolean
  canReadCustomer: Boolean
  canUpdateCustomer: Boolean
  canDeleteCustomer: Boolean
  canEditSocialUser: Boolean
  canAssignRoleToSocialUser: Boolean
  canBanSocialUser: Boolean
  canCreateSocialRole: Boolean
  canEditSocialRole: Boolean
  canDeleteSocialRole: Boolean
  canEditChannel: Boolean
  canSetRateLimit: Boolean
  canMuteChannel: Boolean
  canCloseChannel: Boolean
  canEditMessage: Boolean
  canDeleteMessage: Boolean
  canEditCommunity: Boolean
  canDeleteCommunity: Boolean
  canaddUserToCommunity: Boolean
  caneditUserCommunityInformation: Boolean
  canRemoveUserFromCommunity: Boolean
  canMuteUserInCommunity: Boolean
  canBanUserInCommunity: Boolean
  canEditPostInFeed: Boolean
  canDeletePostInFeed: Boolean
  canEditCommentInFeed: Boolean
  canDeleteCommentInFeed: Boolean
  canCreateSocialCategory: Boolean
  canUpdateSocialCategory: Boolean
  canDeleteSocialCategory: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

type Group {
  id: ID!
  name: String
  status: GroupStatusType
  about: Group_about_Document
  coverImage: Asset
  avatar: Asset
  category: Category
  manager(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  managerCount(where: UserWhereInput! = {}): Int
  members(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  membersCount(where: UserWhereInput! = {}): Int
  invitedMember(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  invitedMemberCount(where: UserWhereInput! = {}): Int
  onlyAdminsCanPost: Boolean
  approveMemberPosts: Boolean
  verified: Boolean
  privacy: GroupPrivacyType
  metadata: JSON
}

enum GroupStatusType {
  active
  pending
  suspended
  locked
  inactive
}

type Group_about_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum GroupPrivacyType {
  private
  public
}

input GroupWhereUniqueInput {
  id: ID
  name: String
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IDFilter
  name: StringFilter
  status: GroupStatusTypeNullableFilter
  coverImage: AssetWhereInput
  avatar: AssetWhereInput
  category: CategoryWhereInput
  manager: UserManyRelationFilter
  members: UserManyRelationFilter
  invitedMember: UserManyRelationFilter
  onlyAdminsCanPost: BooleanFilter
  approveMemberPosts: BooleanFilter
  verified: BooleanFilter
  privacy: GroupPrivacyTypeNullableFilter
}

input GroupStatusTypeNullableFilter {
  equals: GroupStatusType
  in: [GroupStatusType!]
  notIn: [GroupStatusType!]
  not: GroupStatusTypeNullableFilter
}

input GroupPrivacyTypeNullableFilter {
  equals: GroupPrivacyType
  in: [GroupPrivacyType!]
  notIn: [GroupPrivacyType!]
  not: GroupPrivacyTypeNullableFilter
}

input GroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  onlyAdminsCanPost: OrderDirection
  approveMemberPosts: OrderDirection
  verified: OrderDirection
  privacy: OrderDirection
}

input GroupUpdateInput {
  name: String
  status: GroupStatusType
  about: JSON
  coverImage: AssetRelateToOneForUpdateInput
  avatar: AssetRelateToOneForUpdateInput
  category: CategoryRelateToOneForUpdateInput
  manager: UserRelateToManyForUpdateInput
  members: UserRelateToManyForUpdateInput
  invitedMember: UserRelateToManyForUpdateInput
  onlyAdminsCanPost: Boolean
  approveMemberPosts: Boolean
  verified: Boolean
  privacy: GroupPrivacyType
  metadata: JSON
}

input GroupUpdateArgs {
  where: GroupWhereUniqueInput!
  data: GroupUpdateInput!
}

input GroupCreateInput {
  name: String
  status: GroupStatusType
  about: JSON
  coverImage: AssetRelateToOneForCreateInput
  avatar: AssetRelateToOneForCreateInput
  category: CategoryRelateToOneForCreateInput
  manager: UserRelateToManyForCreateInput
  members: UserRelateToManyForCreateInput
  invitedMember: UserRelateToManyForCreateInput
  onlyAdminsCanPost: Boolean
  approveMemberPosts: Boolean
  verified: Boolean
  privacy: GroupPrivacyType
  metadata: JSON
}

type Pet {
  id: ID!
  name: String
  status: PetStatusType
  about: Pet_about_Document
  avatar: Asset
  coverPhoto: Asset
  owner: User
  category: Category
  traits(where: TraitWhereInput! = {}, orderBy: [TraitOrderByInput!]! = [], take: Int, skip: Int! = 0): [Trait!]
  traitsCount(where: TraitWhereInput! = {}): Int
  sex: PetSexType
  weight: Float
  length: Float
  diet: JSON
  origin: JSON
  metadata: JSON
}

enum PetStatusType {
  active
  pending
  suspended
  locked
  inactive
}

type Pet_about_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum PetSexType {
  unknown
  female
  male
  mixed
}

input PetWhereUniqueInput {
  id: ID
}

input PetWhereInput {
  AND: [PetWhereInput!]
  OR: [PetWhereInput!]
  NOT: [PetWhereInput!]
  id: IDFilter
  name: StringFilter
  status: PetStatusTypeNullableFilter
  avatar: AssetWhereInput
  coverPhoto: AssetWhereInput
  owner: UserWhereInput
  category: CategoryWhereInput
  traits: TraitManyRelationFilter
  sex: PetSexTypeNullableFilter
  weight: FloatNullableFilter
  length: FloatNullableFilter
}

input PetStatusTypeNullableFilter {
  equals: PetStatusType
  in: [PetStatusType!]
  notIn: [PetStatusType!]
  not: PetStatusTypeNullableFilter
}

input PetSexTypeNullableFilter {
  equals: PetSexType
  in: [PetSexType!]
  notIn: [PetSexType!]
  not: PetSexTypeNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input PetOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  sex: OrderDirection
  weight: OrderDirection
  length: OrderDirection
}

input PetUpdateInput {
  name: String
  status: PetStatusType
  about: JSON
  avatar: AssetRelateToOneForUpdateInput
  coverPhoto: AssetRelateToOneForUpdateInput
  owner: UserRelateToOneForUpdateInput
  category: CategoryRelateToOneForUpdateInput
  traits: TraitRelateToManyForUpdateInput
  sex: PetSexType
  weight: Float
  length: Float
  diet: JSON
  origin: JSON
  metadata: JSON
}

input PetUpdateArgs {
  where: PetWhereUniqueInput!
  data: PetUpdateInput!
}

input PetCreateInput {
  name: String
  status: PetStatusType
  about: JSON
  avatar: AssetRelateToOneForCreateInput
  coverPhoto: AssetRelateToOneForCreateInput
  owner: UserRelateToOneForCreateInput
  category: CategoryRelateToOneForCreateInput
  traits: TraitRelateToManyForCreateInput
  sex: PetSexType
  weight: Float
  length: Float
  diet: JSON
  origin: JSON
  metadata: JSON
}

type Global {
  id: ID!
  name: String
  handle: String
  data: JSON
  author: User
  status: GlobalStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

enum GlobalStatusType {
  draft
  published
  archived
}

input GlobalWhereUniqueInput {
  id: ID
  handle: String
}

input GlobalWhereInput {
  AND: [GlobalWhereInput!]
  OR: [GlobalWhereInput!]
  NOT: [GlobalWhereInput!]
  id: IDFilter
  name: StringFilter
  handle: StringFilter
  author: UserWhereInput
  status: GlobalStatusTypeNullableFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input GlobalStatusTypeNullableFilter {
  equals: GlobalStatusType
  in: [GlobalStatusType!]
  notIn: [GlobalStatusType!]
  not: GlobalStatusTypeNullableFilter
}

input GlobalOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input GlobalUpdateInput {
  name: String
  handle: String
  data: JSON
  author: UserRelateToOneForUpdateInput
  status: GlobalStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

input GlobalUpdateArgs {
  where: GlobalWhereUniqueInput!
  data: GlobalUpdateInput!
}

input GlobalCreateInput {
  name: String
  handle: String
  data: JSON
  author: UserRelateToOneForCreateInput
  status: GlobalStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Subscription {
  id: ID!
  name: String
  handle: String
  subscriptionType: Structure
  description: Subscription_description_Document
  stripeSubscriptionId: String
  status: SubscriptionStatusType
  featuredImage: Asset
  media(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0): [Asset!]
  mediaCount(where: AssetWhereInput! = {}): Int
  author: User
  seoTitle: String
  seoDescription: String
  seoImage(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0): [Asset!]
  seoImageCount(where: AssetWhereInput! = {}): Int
  customer(where: CustomerWhereInput! = {}, orderBy: [CustomerOrderByInput!]! = [], take: Int, skip: Int! = 0): [Customer!]
  customerCount(where: CustomerWhereInput! = {}): Int
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Subscription_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum SubscriptionStatusType {
  draft
  published
  archived
}

input SubscriptionWhereUniqueInput {
  id: ID
}

input SubscriptionWhereInput {
  AND: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
  id: IDFilter
  name: StringFilter
  handle: StringFilter
  subscriptionType: StructureWhereInput
  stripeSubscriptionId: StringFilter
  status: SubscriptionStatusTypeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetManyRelationFilter
  author: UserWhereInput
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetManyRelationFilter
  customer: CustomerManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input SubscriptionStatusTypeNullableFilter {
  equals: SubscriptionStatusType
  in: [SubscriptionStatusType!]
  notIn: [SubscriptionStatusType!]
  not: SubscriptionStatusTypeNullableFilter
}

input CustomerManyRelationFilter {
  every: CustomerWhereInput
  some: CustomerWhereInput
  none: CustomerWhereInput
}

input SubscriptionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  stripeSubscriptionId: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input SubscriptionUpdateInput {
  name: String
  handle: String
  subscriptionType: StructureRelateToOneForUpdateInput
  description: JSON
  stripeSubscriptionId: String
  status: SubscriptionStatusType
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToManyForUpdateInput
  customer: CustomerRelateToManyForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input CustomerRelateToManyForUpdateInput {
  disconnect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
  create: [CustomerCreateInput!]
  connect: [CustomerWhereUniqueInput!]
}

input SubscriptionUpdateArgs {
  where: SubscriptionWhereUniqueInput!
  data: SubscriptionUpdateInput!
}

input SubscriptionCreateInput {
  name: String
  handle: String
  subscriptionType: StructureRelateToOneForCreateInput
  description: JSON
  stripeSubscriptionId: String
  status: SubscriptionStatusType
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToManyForCreateInput
  customer: CustomerRelateToManyForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input CustomerRelateToManyForCreateInput {
  create: [CustomerCreateInput!]
  connect: [CustomerWhereUniqueInput!]
}

type Setting {
  id: ID!
  name: String
  handle: String
  data: JSON
  author: User
  status: SettingStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

enum SettingStatusType {
  draft
  published
  archived
}

input SettingWhereUniqueInput {
  id: ID
}

input SettingWhereInput {
  AND: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
  id: IDFilter
  name: StringFilter
  handle: StringFilter
  author: UserWhereInput
  status: SettingStatusTypeNullableFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input SettingStatusTypeNullableFilter {
  equals: SettingStatusType
  in: [SettingStatusType!]
  notIn: [SettingStatusType!]
  not: SettingStatusTypeNullableFilter
}

input SettingOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input SettingUpdateInput {
  name: String
  handle: String
  data: JSON
  author: UserRelateToOneForUpdateInput
  status: SettingStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

input SettingUpdateArgs {
  where: SettingWhereUniqueInput!
  data: SettingUpdateInput!
}

input SettingCreateInput {
  name: String
  handle: String
  data: JSON
  author: UserRelateToOneForCreateInput
  status: SettingStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Feature {
  id: ID!
  enabled: Boolean
  name: String
  handle: String
  description: Feature_description_Document
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  author: User
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Feature_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input FeatureWhereUniqueInput {
  id: ID
  handle: String
}

input FeatureWhereInput {
  AND: [FeatureWhereInput!]
  OR: [FeatureWhereInput!]
  NOT: [FeatureWhereInput!]
  id: IDFilter
  enabled: BooleanFilter
  name: StringFilter
  handle: StringFilter
  users: UserManyRelationFilter
  roles: RoleManyRelationFilter
  author: UserWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input RoleManyRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input FeatureOrderByInput {
  id: OrderDirection
  enabled: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input FeatureUpdateInput {
  enabled: Boolean
  name: String
  handle: String
  description: JSON
  users: UserRelateToManyForUpdateInput
  roles: RoleRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input RoleRelateToManyForUpdateInput {
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input FeatureUpdateArgs {
  where: FeatureWhereUniqueInput!
  data: FeatureUpdateInput!
}

input FeatureCreateInput {
  enabled: Boolean
  name: String
  handle: String
  description: JSON
  users: UserRelateToManyForCreateInput
  roles: RoleRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input RoleRelateToManyForCreateInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

type Saved {
  id: ID!
  name: String
  handle: String
  data: JSON
  author: User
  dateCreated: DateTime
  dateUpdated: DateTime
}

input SavedWhereUniqueInput {
  id: ID
}

input SavedWhereInput {
  AND: [SavedWhereInput!]
  OR: [SavedWhereInput!]
  NOT: [SavedWhereInput!]
  id: IDFilter
  name: StringFilter
  handle: StringFilter
  author: UserWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input SavedOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input SavedUpdateInput {
  name: String
  handle: String
  data: JSON
  author: UserRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input SavedUpdateArgs {
  where: SavedWhereUniqueInput!
  data: SavedUpdateInput!
}

input SavedCreateInput {
  name: String
  handle: String
  data: JSON
  author: UserRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Favorite {
  id: ID!
  name: String
  handle: String
  data: JSON
  author: User
  dateCreated: DateTime
  dateUpdated: DateTime
}

input FavoriteWhereUniqueInput {
  id: ID
}

input FavoriteWhereInput {
  AND: [FavoriteWhereInput!]
  OR: [FavoriteWhereInput!]
  NOT: [FavoriteWhereInput!]
  id: IDFilter
  name: StringFilter
  handle: StringFilter
  author: UserWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input FavoriteOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input FavoriteUpdateInput {
  name: String
  handle: String
  data: JSON
  author: UserRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input FavoriteUpdateArgs {
  where: FavoriteWhereUniqueInput!
  data: FavoriteUpdateInput!
}

input FavoriteCreateInput {
  name: String
  handle: String
  data: JSON
  author: UserRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createArticle(data: ArticleCreateInput!): Article
  createArticles(data: [ArticleCreateInput!]!): [Article]
  updateArticle(where: ArticleWhereUniqueInput!, data: ArticleUpdateInput!): Article
  updateArticles(data: [ArticleUpdateArgs!]!): [Article]
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteArticles(where: [ArticleWhereUniqueInput!]!): [Article]
  createAnimal(data: AnimalCreateInput!): Animal
  createAnimals(data: [AnimalCreateInput!]!): [Animal]
  updateAnimal(where: AnimalWhereUniqueInput!, data: AnimalUpdateInput!): Animal
  updateAnimals(data: [AnimalUpdateArgs!]!): [Animal]
  deleteAnimal(where: AnimalWhereUniqueInput!): Animal
  deleteAnimals(where: [AnimalWhereUniqueInput!]!): [Animal]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createTrait(data: TraitCreateInput!): Trait
  createTraits(data: [TraitCreateInput!]!): [Trait]
  updateTrait(where: TraitWhereUniqueInput!, data: TraitUpdateInput!): Trait
  updateTraits(data: [TraitUpdateArgs!]!): [Trait]
  deleteTrait(where: TraitWhereUniqueInput!): Trait
  deleteTraits(where: [TraitWhereUniqueInput!]!): [Trait]
  createCustomer(data: CustomerCreateInput!): Customer
  createCustomers(data: [CustomerCreateInput!]!): [Customer]
  updateCustomer(where: CustomerWhereUniqueInput!, data: CustomerUpdateInput!): Customer
  updateCustomers(data: [CustomerUpdateArgs!]!): [Customer]
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteCustomers(where: [CustomerWhereUniqueInput!]!): [Customer]
  createListing(data: ListingCreateInput!): Listing
  createListings(data: [ListingCreateInput!]!): [Listing]
  updateListing(where: ListingWhereUniqueInput!, data: ListingUpdateInput!): Listing
  updateListings(data: [ListingUpdateArgs!]!): [Listing]
  deleteListing(where: ListingWhereUniqueInput!): Listing
  deleteListings(where: [ListingWhereUniqueInput!]!): [Listing]
  createStore(data: StoreCreateInput!): Store
  createStores(data: [StoreCreateInput!]!): [Store]
  updateStore(where: StoreWhereUniqueInput!, data: StoreUpdateInput!): Store
  updateStores(data: [StoreUpdateArgs!]!): [Store]
  deleteStore(where: StoreWhereUniqueInput!): Store
  deleteStores(where: [StoreWhereUniqueInput!]!): [Store]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createCollection(data: CollectionCreateInput!): Collection
  createCollections(data: [CollectionCreateInput!]!): [Collection]
  updateCollection(where: CollectionWhereUniqueInput!, data: CollectionUpdateInput!): Collection
  updateCollections(data: [CollectionUpdateArgs!]!): [Collection]
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deleteCollections(where: [CollectionWhereUniqueInput!]!): [Collection]
  createStructure(data: StructureCreateInput!): Structure
  createStructures(data: [StructureCreateInput!]!): [Structure]
  updateStructure(where: StructureWhereUniqueInput!, data: StructureUpdateInput!): Structure
  updateStructures(data: [StructureUpdateArgs!]!): [Structure]
  deleteStructure(where: StructureWhereUniqueInput!): Structure
  deleteStructures(where: [StructureWhereUniqueInput!]!): [Structure]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createTaxonomy(data: TaxonomyCreateInput!): Taxonomy
  createTaxonomies(data: [TaxonomyCreateInput!]!): [Taxonomy]
  updateTaxonomy(where: TaxonomyWhereUniqueInput!, data: TaxonomyUpdateInput!): Taxonomy
  updateTaxonomies(data: [TaxonomyUpdateArgs!]!): [Taxonomy]
  deleteTaxonomy(where: TaxonomyWhereUniqueInput!): Taxonomy
  deleteTaxonomies(where: [TaxonomyWhereUniqueInput!]!): [Taxonomy]
  createAsset(data: AssetCreateInput!): Asset
  createAssets(data: [AssetCreateInput!]!): [Asset]
  updateAsset(where: AssetWhereUniqueInput!, data: AssetUpdateInput!): Asset
  updateAssets(data: [AssetUpdateArgs!]!): [Asset]
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  deleteAssets(where: [AssetWhereUniqueInput!]!): [Asset]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createGroup(data: GroupCreateInput!): Group
  createGroups(data: [GroupCreateInput!]!): [Group]
  updateGroup(where: GroupWhereUniqueInput!, data: GroupUpdateInput!): Group
  updateGroups(data: [GroupUpdateArgs!]!): [Group]
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteGroups(where: [GroupWhereUniqueInput!]!): [Group]
  createPet(data: PetCreateInput!): Pet
  createPets(data: [PetCreateInput!]!): [Pet]
  updatePet(where: PetWhereUniqueInput!, data: PetUpdateInput!): Pet
  updatePets(data: [PetUpdateArgs!]!): [Pet]
  deletePet(where: PetWhereUniqueInput!): Pet
  deletePets(where: [PetWhereUniqueInput!]!): [Pet]
  createGlobal(data: GlobalCreateInput!): Global
  createGlobals(data: [GlobalCreateInput!]!): [Global]
  updateGlobal(where: GlobalWhereUniqueInput!, data: GlobalUpdateInput!): Global
  updateGlobals(data: [GlobalUpdateArgs!]!): [Global]
  deleteGlobal(where: GlobalWhereUniqueInput!): Global
  deleteGlobals(where: [GlobalWhereUniqueInput!]!): [Global]
  createSubscription(data: SubscriptionCreateInput!): Subscription
  createSubscriptions(data: [SubscriptionCreateInput!]!): [Subscription]
  updateSubscription(where: SubscriptionWhereUniqueInput!, data: SubscriptionUpdateInput!): Subscription
  updateSubscriptions(data: [SubscriptionUpdateArgs!]!): [Subscription]
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteSubscriptions(where: [SubscriptionWhereUniqueInput!]!): [Subscription]
  createSetting(data: SettingCreateInput!): Setting
  createSettings(data: [SettingCreateInput!]!): [Setting]
  updateSetting(where: SettingWhereUniqueInput!, data: SettingUpdateInput!): Setting
  updateSettings(data: [SettingUpdateArgs!]!): [Setting]
  deleteSetting(where: SettingWhereUniqueInput!): Setting
  deleteSettings(where: [SettingWhereUniqueInput!]!): [Setting]
  createFeature(data: FeatureCreateInput!): Feature
  createFeatures(data: [FeatureCreateInput!]!): [Feature]
  updateFeature(where: FeatureWhereUniqueInput!, data: FeatureUpdateInput!): Feature
  updateFeatures(data: [FeatureUpdateArgs!]!): [Feature]
  deleteFeature(where: FeatureWhereUniqueInput!): Feature
  deleteFeatures(where: [FeatureWhereUniqueInput!]!): [Feature]
  createSaved(data: SavedCreateInput!): Saved
  createSaveds(data: [SavedCreateInput!]!): [Saved]
  updateSaved(where: SavedWhereUniqueInput!, data: SavedUpdateInput!): Saved
  updateSaveds(data: [SavedUpdateArgs!]!): [Saved]
  deleteSaved(where: SavedWhereUniqueInput!): Saved
  deleteSaveds(where: [SavedWhereUniqueInput!]!): [Saved]
  createFavorite(data: FavoriteCreateInput!): Favorite
  createFavorites(data: [FavoriteCreateInput!]!): [Favorite]
  updateFavorite(where: FavoriteWhereUniqueInput!, data: FavoriteUpdateInput!): Favorite
  updateFavorites(data: [FavoriteUpdateArgs!]!): [Favorite]
  deleteFavorite(where: FavoriteWhereUniqueInput!): Favorite
  deleteFavorites(where: [FavoriteWhereUniqueInput!]!): [Favorite]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(email: String!, token: String!, password: String!): RedeemUserPasswordResetTokenResult
  sendUserMagicAuthLink(email: String!): Boolean!
  redeemUserMagicAuthToken(email: String!, token: String!): RedeemUserMagicAuthTokenResult!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

union RedeemUserMagicAuthTokenResult = RedeemUserMagicAuthTokenSuccess | RedeemUserMagicAuthTokenFailure

type RedeemUserMagicAuthTokenSuccess {
  token: String!
  item: User!
}

type RedeemUserMagicAuthTokenFailure {
  code: MagicLinkRedemptionErrorCode!
  message: String!
}

enum MagicLinkRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  articles(where: ArticleWhereInput! = {}, orderBy: [ArticleOrderByInput!]! = [], take: Int, skip: Int! = 0): [Article!]
  article(where: ArticleWhereUniqueInput!): Article
  articlesCount(where: ArticleWhereInput! = {}): Int
  animals(where: AnimalWhereInput! = {}, orderBy: [AnimalOrderByInput!]! = [], take: Int, skip: Int! = 0): [Animal!]
  animal(where: AnimalWhereUniqueInput!): Animal
  animalsCount(where: AnimalWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  traits(where: TraitWhereInput! = {}, orderBy: [TraitOrderByInput!]! = [], take: Int, skip: Int! = 0): [Trait!]
  trait(where: TraitWhereUniqueInput!): Trait
  traitsCount(where: TraitWhereInput! = {}): Int
  customers(where: CustomerWhereInput! = {}, orderBy: [CustomerOrderByInput!]! = [], take: Int, skip: Int! = 0): [Customer!]
  customer(where: CustomerWhereUniqueInput!): Customer
  customersCount(where: CustomerWhereInput! = {}): Int
  listings(where: ListingWhereInput! = {}, orderBy: [ListingOrderByInput!]! = [], take: Int, skip: Int! = 0): [Listing!]
  listing(where: ListingWhereUniqueInput!): Listing
  listingsCount(where: ListingWhereInput! = {}): Int
  stores(where: StoreWhereInput! = {}, orderBy: [StoreOrderByInput!]! = [], take: Int, skip: Int! = 0): [Store!]
  store(where: StoreWhereUniqueInput!): Store
  storesCount(where: StoreWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  collections(where: CollectionWhereInput! = {}, orderBy: [CollectionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Collection!]
  collection(where: CollectionWhereUniqueInput!): Collection
  collectionsCount(where: CollectionWhereInput! = {}): Int
  structures(where: StructureWhereInput! = {}, orderBy: [StructureOrderByInput!]! = [], take: Int, skip: Int! = 0): [Structure!]
  structure(where: StructureWhereUniqueInput!): Structure
  structuresCount(where: StructureWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  taxonomies(where: TaxonomyWhereInput! = {}, orderBy: [TaxonomyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Taxonomy!]
  taxonomy(where: TaxonomyWhereUniqueInput!): Taxonomy
  taxonomiesCount(where: TaxonomyWhereInput! = {}): Int
  assets(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0): [Asset!]
  asset(where: AssetWhereUniqueInput!): Asset
  assetsCount(where: AssetWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0): [Group!]
  group(where: GroupWhereUniqueInput!): Group
  groupsCount(where: GroupWhereInput! = {}): Int
  pets(where: PetWhereInput! = {}, orderBy: [PetOrderByInput!]! = [], take: Int, skip: Int! = 0): [Pet!]
  pet(where: PetWhereUniqueInput!): Pet
  petsCount(where: PetWhereInput! = {}): Int
  globals(where: GlobalWhereInput! = {}, orderBy: [GlobalOrderByInput!]! = [], take: Int, skip: Int! = 0): [Global!]
  global(where: GlobalWhereUniqueInput!): Global
  globalsCount(where: GlobalWhereInput! = {}): Int
  subscriptions(where: SubscriptionWhereInput! = {}, orderBy: [SubscriptionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Subscription!]
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  subscriptionsCount(where: SubscriptionWhereInput! = {}): Int
  settings(where: SettingWhereInput! = {}, orderBy: [SettingOrderByInput!]! = [], take: Int, skip: Int! = 0): [Setting!]
  setting(where: SettingWhereUniqueInput!): Setting
  settingsCount(where: SettingWhereInput! = {}): Int
  features(where: FeatureWhereInput! = {}, orderBy: [FeatureOrderByInput!]! = [], take: Int, skip: Int! = 0): [Feature!]
  feature(where: FeatureWhereUniqueInput!): Feature
  featuresCount(where: FeatureWhereInput! = {}): Int
  saveds(where: SavedWhereInput! = {}, orderBy: [SavedOrderByInput!]! = [], take: Int, skip: Int! = 0): [Saved!]
  saved(where: SavedWhereUniqueInput!): Saved
  savedsCount(where: SavedWhereInput! = {}): Int
  favorites(where: FavoriteWhereInput! = {}, orderBy: [FavoriteOrderByInput!]! = [], take: Int, skip: Int! = 0): [Favorite!]
  favorite(where: FavoriteWhereUniqueInput!): Favorite
  favoritesCount(where: FavoriteWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
