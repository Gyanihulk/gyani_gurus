// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Article {
  id              String             @id @default(cuid())
  title           String             @default("")
  slug            String             @default("")
  articleType     Structure?         @relation("Article_articleType", fields: [articleTypeId], references: [id])
  articleTypeId   String?            @map("articleType")
  content         Json               @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  status          ArticleStatusType? @default(draft)
  featuredImage   Asset?             @relation("Article_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId String?            @map("featuredImage")
  media           Asset[]            @relation("Article_media")
  author          User?              @relation("Article_author", fields: [authorId], references: [id])
  authorId        String?            @map("author")
  tags            Tag[]              @relation("Article_tags")
  seoTitle        String             @default("")
  seoDescription  String             @default("")
  seoImage        Asset?             @relation("Article_seoImage", fields: [seoImageId], references: [id])
  seoImageId      String?            @map("seoImage")
  dateCreated     DateTime?          @default(now())
  dateUpdated     DateTime?          @default(now()) @updatedAt

  @@index([articleTypeId])
  @@index([featuredImageId])
  @@index([authorId])
  @@index([seoImageId])
}

model Animal {
  id              String            @id @default(cuid())
  name            String            @default("")
  slug            String            @default("")
  animalType      Structure?        @relation("Animal_animalType", fields: [animalTypeId], references: [id])
  animalTypeId    String?           @map("animalType")
  scientificName  String            @default("")
  content         Json              @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  status          AnimalStatusType? @default(draft)
  featuredImage   Asset?            @relation("Animal_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId String?           @map("featuredImage")
  media           Asset[]           @relation("Animal_media")
  author          User?             @relation("Animal_author", fields: [authorId], references: [id])
  authorId        String?           @map("author")
  tags            Tag?              @relation("Animal_tags", fields: [tagsId], references: [id])
  tagsId          String?           @map("tags")
  seoTitle        String            @default("")
  seoDescription  String            @default("")
  seoImage        Asset?            @relation("Animal_seoImage", fields: [seoImageId], references: [id])
  seoImageId      String?           @map("seoImage")
  dateCreated     DateTime?         @default(now())
  dateUpdated     DateTime?         @default(now()) @updatedAt

  @@index([animalTypeId])
  @@index([featuredImageId])
  @@index([authorId])
  @@index([tagsId])
  @@index([seoImageId])
}

model Event {
  id              String           @id @default(cuid())
  name            String           @default("")
  slug            String           @default("")
  eventType       Structure?       @relation("Event_eventType", fields: [eventTypeId], references: [id])
  eventTypeId     String?          @map("eventType")
  content         Json             @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  location        Json?
  startDate       DateTime?
  endDate         DateTime?
  featuredImage   Asset?           @relation("Event_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId String?          @map("featuredImage")
  media           Asset?           @relation("Event_media", fields: [mediaId], references: [id])
  mediaId         String?          @map("media")
  author          User?            @relation("Event_author", fields: [authorId], references: [id])
  authorId        String?          @map("author")
  status          EventStatusType? @default(draft)
  tags            Tag[]            @relation("Event_tags")
  seoTitle        String           @default("")
  seoDescription  String           @default("")
  seoImage        Asset?           @relation("Event_seoImage", fields: [seoImageId], references: [id])
  seoImageId      String?          @map("seoImage")
  dateCreated     DateTime?        @default(now())
  dateUpdated     DateTime?        @default(now()) @updatedAt

  @@index([eventTypeId])
  @@index([featuredImageId])
  @@index([mediaId])
  @@index([authorId])
  @@index([seoImageId])
}

model Page {
  id               String            @id @default(cuid())
  title            String            @default("")
  slug             String            @default("")
  pageType         PagePageTypeType?
  content          Json              @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  status           PageStatusType?   @default(draft)
  author           User?             @relation("Page_author", fields: [authorId], references: [id])
  authorId         String?           @map("author")
  tags             Tag[]             @relation("Page_tags")
  parent           Page?             @relation("Page_parent", fields: [parentId], references: [id])
  parentId         String?           @map("parent")
  seoTitle         String            @default("")
  seoDescription   String            @default("")
  seoImage         Asset?            @relation("Page_seoImage", fields: [seoImageId], references: [id])
  seoImageId       String?           @map("seoImage")
  dateCreated      DateTime?         @default(now())
  dateUpdated      DateTime?         @default(now()) @updatedAt
  from_Page_parent Page[]            @relation("Page_parent")

  @@index([authorId])
  @@index([parentId])
  @@index([seoImageId])
}

model Trait {
  id              String           @id @default(cuid())
  name            String           @default("")
  slug            String           @default("")
  animalType      Structure?       @relation("Trait_animalType", fields: [animalTypeId], references: [id])
  animalTypeId    String?          @map("animalType")
  content         Json             @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  status          TraitStatusType? @default(draft)
  featuredImage   Asset?           @relation("Trait_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId String?          @map("featuredImage")
  media           Asset[]          @relation("Trait_media")
  author          User?            @relation("Trait_author", fields: [authorId], references: [id])
  authorId        String?          @map("author")
  tags            Tag[]            @relation("Tag_traits")
  seoTitle        String           @default("")
  seoDescription  String           @default("")
  seoImage        Asset?           @relation("Trait_seoImage", fields: [seoImageId], references: [id])
  seoImageId      String?          @map("seoImage")
  dateCreated     DateTime?        @default(now())
  dateUpdated     DateTime?        @default(now()) @updatedAt
  from_Pet_traits Pet[]            @relation("Pet_traits")

  @@index([animalTypeId])
  @@index([featuredImageId])
  @@index([authorId])
  @@index([seoImageId])
}

model Customer {
  id               String              @id @default(cuid())
  user             User[]              @relation("User_customer")
  customerType     Structure?          @relation("Customer_customerType", fields: [customerTypeId], references: [id])
  customerTypeId   String?             @map("customerType")
  stripeCustomerId String              @default("")
  subscription     Subscription?       @relation("Customer_subscription", fields: [subscriptionId], references: [id])
  subscriptionId   String?             @map("subscription")
  status           CustomerStatusType? @default(draft)
  dateCreated      DateTime?           @default(now())
  dateUpdated      DateTime?           @default(now()) @updatedAt

  @@index([customerTypeId])
  @@index([subscriptionId])
}

model Listing {
  id              String             @id @default(cuid())
  title           String             @default("")
  slug            String             @default("")
  listingType     Structure?         @relation("Listing_listingType", fields: [listingTypeId], references: [id])
  listingTypeId   String?            @map("listingType")
  price           String             @default("")
  description     Json               @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  store           Store?             @relation("Listing_store", fields: [storeId], references: [id])
  storeId         String?            @unique @map("store")
  stripeProductId String             @default("")
  status          ListingStatusType? @default(draft)
  featuredImage   Asset?             @relation("Listing_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId String?            @map("featuredImage")
  media           Asset?             @relation("Listing_media", fields: [mediaId], references: [id])
  mediaId         String?            @map("media")
  author          User?              @relation("Listing_author", fields: [authorId], references: [id])
  authorId        String?            @map("author")
  tags            Tag[]              @relation("Listing_tags")
  seoTitle        String             @default("")
  seoDescription  String             @default("")
  seoImage        Asset?             @relation("Listing_seoImage", fields: [seoImageId], references: [id])
  seoImageId      String?            @map("seoImage")
  dateCreated     DateTime?          @default(now())
  dateUpdated     DateTime?          @default(now()) @updatedAt

  @@index([listingTypeId])
  @@index([featuredImageId])
  @@index([mediaId])
  @@index([authorId])
  @@index([seoImageId])
}

model Store {
  id              String           @id @default(cuid())
  name            String           @default("")
  slug            String           @default("")
  storeType       Structure?       @relation("Store_storeType", fields: [storeTypeId], references: [id])
  storeTypeId     String?          @map("storeType")
  description     Json             @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  listings        Listing?         @relation("Listing_store")
  location        Json?
  stripeStoreId   String           @default("")
  status          StoreStatusType? @default(draft)
  featuredImage   Asset?           @relation("Store_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId String?          @map("featuredImage")
  media           Asset?           @relation("Store_media", fields: [mediaId], references: [id])
  mediaId         String?          @map("media")
  author          User?            @relation("Store_author", fields: [authorId], references: [id])
  authorId        String?          @map("author")
  tags            Tag[]            @relation("Store_tags")
  seoTitle        String           @default("")
  seoDescription  String           @default("")
  seoImage        Asset?           @relation("Store_seoImage", fields: [seoImageId], references: [id])
  seoImageId      String?          @map("seoImage")
  dateCreated     DateTime?        @default(now())
  dateUpdated     DateTime?        @default(now()) @updatedAt

  @@index([storeTypeId])
  @@index([featuredImageId])
  @@index([mediaId])
  @@index([authorId])
  @@index([seoImageId])
}

model Category {
  id                String     @id @default(cuid())
  name              String     @unique @default("")
  slug              String     @default("")
  description       Json       @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  parent            Category?  @relation("Category_parent", fields: [parentId], references: [id])
  parentId          String?    @map("parent")
  taxonomy          Taxonomy[] @relation("Category_taxonomy")
  asset             Asset?     @relation("Category_asset", fields: [assetId], references: [id])
  assetId           String?    @map("asset")
  meta              Json?
  children          Category[] @relation("Category_parent")
  groups            Group[]    @relation("Group_category")
  dateCreated       DateTime?  @default(now())
  dateUpdated       DateTime?  @default(now()) @updatedAt
  from_Pet_category Pet[]      @relation("Pet_category")

  @@index([parentId])
  @@index([assetId])
}

model Collection {
  id          String                @id @default(cuid())
  name        String                @default("")
  handle      String                @unique @default("")
  author      User?                 @relation("Collection_author", fields: [authorId], references: [id])
  authorId    String?               @map("author")
  status      CollectionStatusType? @default(draft)
  tags        Tag[]                 @relation("Collection_tags")
  data        Json?
  dateCreated DateTime?             @default(now())
  dateUpdated DateTime?             @default(now()) @updatedAt

  @@index([authorId])
}

model Structure {
  id                                 String         @id @default(cuid())
  name                               String         @default("")
  handle                             String         @unique @default("")
  data                               Json?
  dateCreated                        DateTime?      @default(now())
  dateUpdated                        DateTime?      @default(now()) @updatedAt
  from_Article_articleType           Article[]      @relation("Article_articleType")
  from_Animal_animalType             Animal[]       @relation("Animal_animalType")
  from_Event_eventType               Event[]        @relation("Event_eventType")
  from_Trait_animalType              Trait[]        @relation("Trait_animalType")
  from_Customer_customerType         Customer[]     @relation("Customer_customerType")
  from_Listing_listingType           Listing[]      @relation("Listing_listingType")
  from_Store_storeType               Store[]        @relation("Store_storeType")
  from_Subscription_subscriptionType Subscription[] @relation("Subscription_subscriptionType")
}

model Tag {
  id                   String           @id @default(cuid())
  name                 String           @default("")
  slug                 String           @default("")
  description          Json             @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  parent               Tag?             @relation("Tag_parent", fields: [parentId], references: [id])
  parentId             String?          @map("parent")
  taxonomy             TagTaxonomyType? @default(posts)
  asset                Asset?           @relation("Tag_asset", fields: [assetId], references: [id])
  assetId              String?          @map("asset")
  listings             Listing[]        @relation("Listing_tags")
  stores               Store[]          @relation("Store_tags")
  animals              Animal[]         @relation("Animal_tags")
  articles             Article[]        @relation("Article_tags")
  events               Event[]          @relation("Event_tags")
  pages                Page[]           @relation("Page_tags")
  traits               Trait[]          @relation("Tag_traits")
  dateCreated          DateTime?        @default(now())
  dateUpdated          DateTime?        @default(now()) @updatedAt
  from_Collection_tags Collection[]     @relation("Collection_tags")
  from_Tag_parent      Tag[]            @relation("Tag_parent")
  from_Asset_tags      Asset[]          @relation("Asset_tags")

  @@index([parentId])
  @@index([assetId])
}

model Taxonomy {
  id                     String     @id @default(cuid())
  name                   String     @unique @default("")
  slug                   String     @default("")
  description            Json       @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  meta                   Json?
  from_Category_taxonomy Category[] @relation("Category_taxonomy")
}

model Asset {
  id                              String           @id @default(cuid())
  file_filesize                   Int?
  file_filename                   String?
  folder                          AssetFolderType? @default(draft)
  image                           Json?
  altTitle                        String           @default("")
  caption                         String           @default("")
  status                          AssetStatusType? @default(draft)
  author                          User?            @relation("Asset_author", fields: [authorId], references: [id])
  authorId                        String?          @unique @map("author")
  tags                            Tag[]            @relation("Asset_tags")
  dateCreated                     DateTime?        @default(now())
  dateUpdated                     DateTime?        @default(now()) @updatedAt
  from_Article_featuredImage      Article[]        @relation("Article_featuredImage")
  from_Article_media              Article[]        @relation("Article_media")
  from_Article_seoImage           Article[]        @relation("Article_seoImage")
  from_Animal_featuredImage       Animal[]         @relation("Animal_featuredImage")
  from_Animal_media               Animal[]         @relation("Animal_media")
  from_Animal_seoImage            Animal[]         @relation("Animal_seoImage")
  from_Event_featuredImage        Event[]          @relation("Event_featuredImage")
  from_Event_media                Event[]          @relation("Event_media")
  from_Event_seoImage             Event[]          @relation("Event_seoImage")
  from_Page_seoImage              Page[]           @relation("Page_seoImage")
  from_Trait_featuredImage        Trait[]          @relation("Trait_featuredImage")
  from_Trait_media                Trait[]          @relation("Trait_media")
  from_Trait_seoImage             Trait[]          @relation("Trait_seoImage")
  from_Listing_featuredImage      Listing[]        @relation("Listing_featuredImage")
  from_Listing_media              Listing[]        @relation("Listing_media")
  from_Listing_seoImage           Listing[]        @relation("Listing_seoImage")
  from_Store_featuredImage        Store[]          @relation("Store_featuredImage")
  from_Store_media                Store[]          @relation("Store_media")
  from_Store_seoImage             Store[]          @relation("Store_seoImage")
  from_Category_asset             Category[]       @relation("Category_asset")
  from_Tag_asset                  Tag[]            @relation("Tag_asset")
  from_User_avatar                User[]           @relation("User_avatar")
  from_User_coverPhoto            User[]           @relation("User_coverPhoto")
  from_Group_coverImage           Group[]          @relation("Group_coverImage")
  from_Group_avatar               Group[]          @relation("Group_avatar")
  from_Pet_avatar                 Pet[]            @relation("Pet_avatar")
  from_Pet_coverPhoto             Pet[]            @relation("Pet_coverPhoto")
  from_Subscription_featuredImage Subscription[]   @relation("Subscription_featuredImage")
  from_Subscription_media         Subscription[]   @relation("Subscription_media")
  from_Subscription_seoImage      Subscription[]   @relation("Subscription_seoImage")
}

model User {
  id                       String                    @id @default(cuid())
  name                     String                    @default("")
  username                 String                    @unique @default("")
  email                    String                    @unique @default("")
  firstName                String                    @default("")
  lastName                 String                    @default("")
  password                 String
  phoneNumber              String                    @default("")
  about                    Json                      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  website                  String                    @default("")
  termsAndCondition        Boolean                   @default(false)
  location                 Json?
  businessCategory         UserBusinessCategoryType?
  type                     UserTypeType?             @default(user)
  tokenExpiryTime          DateTime?
  avatar                   Asset?                    @relation("User_avatar", fields: [avatarId], references: [id])
  avatarId                 String?                   @map("avatar")
  coverPhoto               Asset?                    @relation("User_coverPhoto", fields: [coverPhotoId], references: [id])
  coverPhotoId             String?                   @map("coverPhoto")
  role                     Role?                     @relation("User_role", fields: [roleId], references: [id])
  roleId                   String?                   @map("role")
  following                User[]                    @relation("User_followers")
  followers                User[]                    @relation("User_followers")
  groups                   Group[]                   @relation("Group_members")
  pinnedGroups             Group[]                   @relation("User_pinnedGroups")
  groupInvites             Group[]                   @relation("Group_invitedMember")
  groupManager             Group[]                   @relation("Group_manager")
  listings                 Listing[]                 @relation("Listing_author")
  animals                  Animal[]                  @relation("Animal_author")
  pets                     Pet[]                     @relation("Pet_owner")
  articles                 Article[]                 @relation("Article_author")
  events                   Event[]                   @relation("Event_author")
  pages                    Page[]                    @relation("Page_author")
  customer                 Customer?                 @relation("User_customer", fields: [customerId], references: [id])
  customerId               String?                   @map("customer")
  store                    Store[]                   @relation("Store_author")
  assets                   Asset?                    @relation("Asset_author")
  traits                   Trait[]                   @relation("Trait_author")
  saved                    Saved[]                   @relation("Saved_author")
  favorite                 Favorite[]                @relation("Favorite_author")
  otherAccounts            User[]                    @relation("User_otherAccounts")
  magicToken               String                    @default("")
  status                   UserStatusType?           @default(pending)
  metadata                 Json?
  dateCreated              DateTime?                 @default(now())
  dateUpdated              DateTime?                 @default(now()) @updatedAt
  passwordResetToken       String?
  passwordResetIssuedAt    DateTime?
  passwordResetRedeemedAt  DateTime?
  magicAuthToken           String?
  magicAuthIssuedAt        DateTime?
  magicAuthRedeemedAt      DateTime?
  from_Collection_author   Collection[]              @relation("Collection_author")
  from_User_otherAccounts  User[]                    @relation("User_otherAccounts")
  from_Global_author       Global[]                  @relation("Global_author")
  from_Subscription_author Subscription[]            @relation("Subscription_author")
  from_Setting_author      Setting[]                 @relation("Setting_author")
  from_Feature_users       Feature[]                 @relation("Feature_users")
  from_Feature_author      Feature[]                 @relation("Feature_author")

  @@index([avatarId])
  @@index([coverPhotoId])
  @@index([roleId])
  @@index([customerId])
}

model Role {
  id                              String    @id @default(cuid())
  name                            String    @unique @default("")
  handle                          String    @default("")
  description                     String    @default("")
  dateCreated                     DateTime? @default(now())
  dateUpdated                     DateTime? @default(now()) @updatedAt
  canCreateUser                   Boolean   @default(false)
  canReadUser                     Boolean   @default(false)
  canUpdateUser                   Boolean   @default(false)
  canDeleteUser                   Boolean   @default(false)
  canCreateRole                   Boolean   @default(false)
  canReadRole                     Boolean   @default(false)
  canUpdateRole                   Boolean   @default(false)
  canDeleteRole                   Boolean   @default(false)
  canCreateAsset                  Boolean   @default(false)
  canReadAsset                    Boolean   @default(false)
  canUpdateAsset                  Boolean   @default(false)
  canDeleteAsset                  Boolean   @default(false)
  canUpdatePets                   Boolean   @default(false)
  canDeletePets                   Boolean   @default(false)
  canUpdateTaxonomy               Boolean   @default(false)
  canDeleteTaxonomy               Boolean   @default(false)
  canCreateCategory               Boolean   @default(false)
  canReadCategory                 Boolean   @default(false)
  canUpdateCategory               Boolean   @default(false)
  canDeleteCategory               Boolean   @default(false)
  canCreateCollection             Boolean   @default(false)
  canReadCollection               Boolean   @default(false)
  canUpdateCollection             Boolean   @default(false)
  canDeleteCollection             Boolean   @default(false)
  canCreateGlobal                 Boolean   @default(false)
  canReadGlobal                   Boolean   @default(false)
  canUpdateGlobal                 Boolean   @default(false)
  canDeleteGlobal                 Boolean   @default(false)
  canCreateStructure              Boolean   @default(false)
  canReadStructure                Boolean   @default(false)
  canUpdateStructure              Boolean   @default(false)
  canDeleteStructure              Boolean   @default(false)
  canCreateTrait                  Boolean   @default(false)
  canReadTrait                    Boolean   @default(false)
  canUpdateTrait                  Boolean   @default(false)
  canDeleteTrait                  Boolean   @default(false)
  canUpdateGroups                 Boolean   @default(false)
  canDeleteGroups                 Boolean   @default(false)
  canCreatePage                   Boolean   @default(false)
  canReadPage                     Boolean   @default(false)
  canUpdatePage                   Boolean   @default(false)
  canDeletePage                   Boolean   @default(false)
  canCreateEvent                  Boolean   @default(false)
  canReadEvent                    Boolean   @default(false)
  canUpdateEvent                  Boolean   @default(false)
  canDeleteEvent                  Boolean   @default(false)
  canCreateAnimal                 Boolean   @default(false)
  canReadAnimal                   Boolean   @default(false)
  canUpdateAnimal                 Boolean   @default(false)
  canDeleteAnimal                 Boolean   @default(false)
  canCreateArticle                Boolean   @default(false)
  canReadArticle                  Boolean   @default(false)
  canUpdateArticle                Boolean   @default(false)
  canDeleteArticle                Boolean   @default(false)
  canCreateSubscription           Boolean   @default(false)
  canReadSubscription             Boolean   @default(false)
  canUpdateSubscription           Boolean   @default(false)
  canDeleteSubscription           Boolean   @default(false)
  canCreateSetting                Boolean   @default(false)
  canReadSetting                  Boolean   @default(false)
  canUpdateSetting                Boolean   @default(false)
  canDeleteSetting                Boolean   @default(false)
  canCreateFeature                Boolean   @default(false)
  canReadFeature                  Boolean   @default(false)
  canUpdateFeature                Boolean   @default(false)
  canDeleteFeature                Boolean   @default(false)
  canCreateTag                    Boolean   @default(false)
  canReadTag                      Boolean   @default(false)
  canUpdateTag                    Boolean   @default(false)
  canDeleteTag                    Boolean   @default(false)
  canCreateSaved                  Boolean   @default(false)
  canReadSaved                    Boolean   @default(false)
  canUpdateSaved                  Boolean   @default(false)
  canDeleteSaved                  Boolean   @default(false)
  canCreateFavorite               Boolean   @default(false)
  canReadFavorite                 Boolean   @default(false)
  canUpdateFavorite               Boolean   @default(false)
  canDeleteFavorite               Boolean   @default(false)
  canCreateStore                  Boolean   @default(false)
  canReadStore                    Boolean   @default(false)
  canUpdateStore                  Boolean   @default(false)
  canDeleteStore                  Boolean   @default(false)
  canCreateListing                Boolean   @default(false)
  canReadListing                  Boolean   @default(false)
  canUpdateListing                Boolean   @default(false)
  canDeleteListing                Boolean   @default(false)
  canCreateCustomer               Boolean   @default(false)
  canReadCustomer                 Boolean   @default(false)
  canUpdateCustomer               Boolean   @default(false)
  canDeleteCustomer               Boolean   @default(false)
  canEditSocialUser               Boolean   @default(false)
  canAssignRoleToSocialUser       Boolean   @default(false)
  canBanSocialUser                Boolean   @default(false)
  canCreateSocialRole             Boolean   @default(false)
  canEditSocialRole               Boolean   @default(false)
  canDeleteSocialRole             Boolean   @default(false)
  canEditChannel                  Boolean   @default(false)
  canSetRateLimit                 Boolean   @default(false)
  canMuteChannel                  Boolean   @default(false)
  canCloseChannel                 Boolean   @default(false)
  canEditMessage                  Boolean   @default(false)
  canDeleteMessage                Boolean   @default(false)
  canEditCommunity                Boolean   @default(false)
  canDeleteCommunity              Boolean   @default(false)
  canaddUserToCommunity           Boolean   @default(false)
  caneditUserCommunityInformation Boolean   @default(false)
  canRemoveUserFromCommunity      Boolean   @default(false)
  canMuteUserInCommunity          Boolean   @default(false)
  canBanUserInCommunity           Boolean   @default(false)
  canEditPostInFeed               Boolean   @default(false)
  canDeletePostInFeed             Boolean   @default(false)
  canEditCommentInFeed            Boolean   @default(false)
  canDeleteCommentInFeed          Boolean   @default(false)
  canCreateSocialCategory         Boolean   @default(false)
  canUpdateSocialCategory         Boolean   @default(false)
  canDeleteSocialCategory         Boolean   @default(false)
  assignedTo                      User[]    @relation("User_role")
  from_Feature_roles              Feature[] @relation("Feature_roles")
}

model Group {
  id                     String            @id @default(cuid())
  name                   String            @unique @default("")
  status                 GroupStatusType?  @default(pending)
  about                  Json              @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  coverImage             Asset?            @relation("Group_coverImage", fields: [coverImageId], references: [id])
  coverImageId           String?           @map("coverImage")
  avatar                 Asset?            @relation("Group_avatar", fields: [avatarId], references: [id])
  avatarId               String?           @map("avatar")
  category               Category?         @relation("Group_category", fields: [categoryId], references: [id])
  categoryId             String?           @map("category")
  manager                User[]            @relation("Group_manager")
  members                User[]            @relation("Group_members")
  invitedMember          User[]            @relation("Group_invitedMember")
  onlyAdminsCanPost      Boolean           @default(false)
  approveMemberPosts     Boolean           @default(false)
  verified               Boolean           @default(false)
  privacy                GroupPrivacyType? @default(private)
  metadata               Json?
  from_User_pinnedGroups User[]            @relation("User_pinnedGroups")

  @@index([coverImageId])
  @@index([avatarId])
  @@index([categoryId])
}

model Pet {
  id           String         @id @default(cuid())
  name         String         @default("")
  status       PetStatusType? @default(pending)
  about        Json           @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  avatar       Asset?         @relation("Pet_avatar", fields: [avatarId], references: [id])
  avatarId     String?        @map("avatar")
  coverPhoto   Asset?         @relation("Pet_coverPhoto", fields: [coverPhotoId], references: [id])
  coverPhotoId String?        @map("coverPhoto")
  owner        User?          @relation("Pet_owner", fields: [ownerId], references: [id])
  ownerId      String?        @map("owner")
  category     Category?      @relation("Pet_category", fields: [categoryId], references: [id])
  categoryId   String?        @map("category")
  traits       Trait[]        @relation("Pet_traits")
  sex          PetSexType?    @default(unknown)
  weight       Float?
  length       Float?
  diet         Json?
  origin       Json?
  metadata     Json?

  @@index([avatarId])
  @@index([coverPhotoId])
  @@index([ownerId])
  @@index([categoryId])
}

model Global {
  id          String            @id @default(cuid())
  name        String            @default("")
  handle      String            @unique @default("")
  data        Json?
  author      User?             @relation("Global_author", fields: [authorId], references: [id])
  authorId    String?           @map("author")
  status      GlobalStatusType? @default(draft)
  dateCreated DateTime?         @default(now())
  dateUpdated DateTime?         @default(now()) @updatedAt

  @@index([authorId])
}

model Subscription {
  id                   String                  @id @default(cuid())
  name                 String                  @default("")
  handle               String                  @default("")
  subscriptionType     Structure?              @relation("Subscription_subscriptionType", fields: [subscriptionTypeId], references: [id])
  subscriptionTypeId   String?                 @map("subscriptionType")
  description          Json                    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  stripeSubscriptionId String                  @default("")
  status               SubscriptionStatusType? @default(draft)
  featuredImage        Asset?                  @relation("Subscription_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId      String?                 @map("featuredImage")
  media                Asset[]                 @relation("Subscription_media")
  author               User?                   @relation("Subscription_author", fields: [authorId], references: [id])
  authorId             String?                 @map("author")
  seoTitle             String                  @default("")
  seoDescription       String                  @default("")
  seoImage             Asset[]                 @relation("Subscription_seoImage")
  customer             Customer[]              @relation("Customer_subscription")
  dateCreated          DateTime?               @default(now())
  dateUpdated          DateTime?               @default(now()) @updatedAt

  @@index([subscriptionTypeId])
  @@index([featuredImageId])
  @@index([authorId])
}

model Setting {
  id          String             @id @default(cuid())
  name        String             @default("")
  handle      String             @default("")
  data        Json?
  author      User?              @relation("Setting_author", fields: [authorId], references: [id])
  authorId    String?            @map("author")
  status      SettingStatusType? @default(draft)
  dateCreated DateTime?          @default(now())
  dateUpdated DateTime?          @default(now()) @updatedAt

  @@index([authorId])
}

model Feature {
  id          String    @id @default(cuid())
  enabled     Boolean   @default(false)
  name        String    @default("")
  handle      String    @unique @default("")
  description Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  users       User[]    @relation("Feature_users")
  roles       Role[]    @relation("Feature_roles")
  author      User?     @relation("Feature_author", fields: [authorId], references: [id])
  authorId    String?   @map("author")
  dateCreated DateTime? @default(now())
  dateUpdated DateTime? @default(now()) @updatedAt

  @@index([authorId])
}

model Saved {
  id          String    @id @default(cuid())
  name        String    @default("")
  handle      String    @default("")
  data        Json?
  author      User?     @relation("Saved_author", fields: [authorId], references: [id])
  authorId    String?   @map("author")
  dateCreated DateTime? @default(now())
  dateUpdated DateTime? @default(now()) @updatedAt

  @@index([authorId])
}

model Favorite {
  id          String    @id @default(cuid())
  name        String    @default("")
  handle      String    @default("")
  data        Json?
  author      User?     @relation("Favorite_author", fields: [authorId], references: [id])
  authorId    String?   @map("author")
  dateCreated DateTime? @default(now())
  dateUpdated DateTime? @default(now()) @updatedAt

  @@index([authorId])
}

enum ArticleStatusType {
  draft
  published
  archived
}

enum AnimalStatusType {
  draft
  published
  archived
}

enum EventStatusType {
  draft
  published
  archived
}

enum PagePageTypeType {
  landing
  homepage
  market
  blog
  about
  contact
  search
  notFound404
}

enum PageStatusType {
  draft
  published
  archived
}

enum TraitStatusType {
  draft
  published
  archived
}

enum CustomerStatusType {
  draft
  published
  archived
}

enum ListingStatusType {
  draft
  published
  archived
}

enum StoreStatusType {
  draft
  published
  archived
}

enum CollectionStatusType {
  draft
  published
  archived
}

enum TagTaxonomyType {
  posts
  listings
  events
  groups
  articles
  pets
}

enum AssetFolderType {
  draft
  published
  archived
}

enum AssetStatusType {
  draft
  published
  archived
}

enum UserBusinessCategoryType {
  petStore
  expo
  vetClinic
  breeder
  petRescue
  nonProfit
  other
}

enum UserTypeType {
  user
  business
}

enum UserStatusType {
  active
  pending
  suspended
  locked
  inactive
}

enum GroupStatusType {
  active
  pending
  suspended
  locked
  inactive
}

enum GroupPrivacyType {
  private
  public
}

enum PetStatusType {
  active
  pending
  suspended
  locked
  inactive
}

enum PetSexType {
  unknown
  female
  male
  mixed
}

enum GlobalStatusType {
  draft
  published
  archived
}

enum SubscriptionStatusType {
  draft
  published
  archived
}

enum SettingStatusType {
  draft
  published
  archived
}
